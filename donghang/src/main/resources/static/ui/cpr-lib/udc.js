/// start - udc.apply
/*
 * UDC Qualified Name: udc.apply
 * App URI: udc/apply
 * Source Location: udc/apply.clx
 *
 * This file was generated by eXBuilder6 compiler(1.0.4584), Don't edit manually.
 */
(function(){
	// App Declaration
		var internalApp = new cpr.core.App("udc/apply", { 
			onPrepare: function(loader) {
			},
			onCreate: function(/* cpr.core.AppInstance */ app, exports) {
				var linker = {};
				// Start - User Script
				/************************************************
				 * apply.js
				 * Created at 2023. 8. 10. 오전 10:53:17.
				 *
				 * @author USER
				 ************************************************/;
				// End - User Script
				
				// Header
				app.supportMedia("all and (min-width: 1024px)", "default");
				app.supportMedia("all and (min-width: 500px) and (max-width: 1023px)", "tablet");
				app.supportMedia("all and (max-width: 499px)", "mobile");
				
				// Configure root container
				var container = app.getContainer();
				container.style.css({
					"width" : "100%",
					"height" : "100%"
				});
				
				// Layout
				var xYLayout_1 = new cpr.controls.layouts.XYLayout();
				container.setLayout(xYLayout_1);
				
				// UI Configuration
				var button_1 = new cpr.controls.Button();
				button_1.value = "신청";
				container.addChild(button_1, {
					"top": "243px",
					"left": "263px",
					"width": "254px",
					"height": "130px"
				});
			}
		});
	internalApp.title = "apply";
	
	// Type declaration for apply
	cpr.utils.Util.ensurePackage("udc").apply = function(id){
		cpr.controls.UDCBase.call(this, "udc.apply", internalApp, id);
	};
	
	udc.apply.prototype = Object.create(cpr.controls.UDCBase.prototype);
	Object.defineProperty(udc.apply.prototype, "type", {
		get : function(){
			return "udc.apply";
		},
		
		configurable: true
	});
	
	// App Properties
	
	// Register type into the Platform and package
	cpr.core.Platform.INSTANCE.register(internalApp);
})();
/// end - udc.apply
/// start - udc.exam.SelectDatePopup_POP
/*
 * UDC Qualified Name: udc.exam.SelectDatePopup_POP
 * App URI: udc/exam/SelectDatePopup_POP
 * Source Location: udc/exam/SelectDatePopup_POP.clx
 *
 * This file was generated by eXBuilder6 compiler(1.0.4584), Don't edit manually.
 */
(function(){
	// App Declaration
		var internalApp = new cpr.core.App("udc/exam/SelectDatePopup_POP", { 
			onPrepare: function(loader) {
			},
			onCreate: function(/* cpr.core.AppInstance */ app, exports) {
				var linker = {};
				// Start - User Script
				/************************************************
				 * smpUdcSelectDatePopup_POP.js
				 * Created at 2021. 12. 10. 오전 8:53:22.
				 *
				 * @author HANS
				 ************************************************/
	
				var msSelectOption = "";
	
				/*
				 * 캘린더에서 before-value-change 이벤트 발생 시 호출.
				 * Calendar의 value를 변경하여 변경된 값이 저장되기 전에 발생하는 이벤트. 다음 이벤트로 value-change가 발생합니다.
				 */
				function onCal1BeforeValueChange( /* cpr.events.CValueChangeEvent */ e) {
					/** 
					 * @type cpr.controls.Calendar
					 */
					var vcStCal = e.control;
					var vsNewValue = e.newValue;
					var vcEdCal = app.lookup("cal2");
					vcEdCal.putValues([vsNewValue]);
					
					var vsNextMont = moment(vcEdCal.current).add(1, "month");
					vcEdCal.navigate(vsNextMont);
					
					var vaFromTime = vsNewValue.split(vcStCal.delimiter);
					var vsFromTime = vaFromTime[0];
					app.lookup("dtiFromTime").putValue(vsFromTime);
				}
	
				/*
				 * 캘린더에서 before-value-change 이벤트 발생 시 호출.
				 * Calendar의 value를 변경하여 변경된 값이 저장되기 전에 발생하는 이벤트. 다음 이벤트로 value-change가 발생합니다.
				 */
				function onCal2BeforeValueChange( /* cpr.events.CValueChangeEvent */ e) {
					/** 
					 * @type cpr.controls.Calendar
					 */
					var vcEdCal = e.control;
					var vcStCal = app.lookup("cal1");
					var vsOldValue = e.oldValue;
					var vsDelimeter = vcEdCal.delimiter;
					
					var vsOldCheck = vsOldValue.replace(vsDelimeter, "");
					var vsNewValue = e.newValue;
					if (vsOldCheck != null && vsOldCheck != "") {
						
						vsOldValue = vsOldValue.split(vcEdCal.delimiter)[0];
						if (vsNewValue.indexOf(vcEdCal.delimiter) == -1) {
							e.preventDefault();
							
							vcStCal.putValues([vsOldValue, vsNewValue]);
							vcEdCal.putValues([vsOldValue, vsNewValue]);
							
						} else {
							vcStCal.putValue(vsNewValue);
						}
						
						vcStCal.navigate(moment(vsOldValue, vcEdCal.format));
					} else {
						e.preventDefault();
						
						if (msSelectOption != "" && msSelectOption != null) {
							if (msSelectOption == "date") {
								var vsFromDate = moment(vsNewValue, vcEdCal.format).subtract(1, 'year').format(vcEdCal.format);
								vcStCal.putValues([vsFromDate, vsNewValue]);
								vcEdCal.putValues([vsFromDate, vsNewValue]);
								vcStCal.navigate(moment(vsFromDate, vcStCal.format));
								
							} else if (msSelectOption == "dayofweek") {
								var vsFromDate = moment(vsNewValue, vcEdCal.format).subtract(364, "day").format(vcEdCal.format);
								vcStCal.putValues([vsFromDate, vsNewValue]);
								vcEdCal.putValues([vsFromDate, vsNewValue]);
								vcStCal.navigate(moment(vsFromDate, vcStCal.format));
							}
						}
					}
				}
	
				/*
				 * "OK" 버튼(btnOK)에서 click 이벤트 발생 시 호출.
				 * 사용자가 컨트롤을 클릭할 때 발생하는 이벤트.
				 */
				function onBtnOKClick( /* cpr.events.CMouseEvent */ e) {
					app.close(app.lookup("cal1").values);
				}
	
				/*
				 * "Cancel" 버튼(btnCancel)에서 click 이벤트 발생 시 호출.
				 * 사용자가 컨트롤을 클릭할 때 발생하는 이벤트.
				 */
				function onBtnCancelClick( /* cpr.events.CMouseEvent */ e) {
					app.close();
				}
	
				/*
				 * 루트 컨테이너에서 init 이벤트 발생 시 호출.
				 * 앱이 최초 구성될 때 발생하는 이벤트 입니다.
				 */
				function onBodyInit( /* cpr.events.CEvent */ e) {
					var vcStCal = app.lookup("cal1");
					var vcEdCal = app.lookup("cal2")
					var voInit = app.getHostProperty("initValue");
					if (voInit != null) {
						var vsSelectOption = voInit["selectOption"];
						if (vsSelectOption == "month") {
							vcStCal.calendarType = "yearmonth";
							vcEdCal.calendarType = "yearmonth";
							
						} else {
							vcStCal.calendarType = "yearmonthdate";
							vcEdCal.calendarType = "yearmonthdate";
						}
					}
					var vsSelectOption = voInit["selectOption"];
					msSelectOption = vsSelectOption;
				}
	
				/*
				 * 루트 컨테이너에서 load 이벤트 발생 시 호출.
				 * 앱이 최초 구성된후 최초 랜더링 직후에 발생하는 이벤트 입니다.
				 */
				function onBodyLoad( /* cpr.events.CEvent */ e) {
					var vcStCal = app.lookup("cal1");
					var vcEdCal = app.lookup("cal2");
					
					var vcDtiFromTime = app.lookup("dtiFromTime");
					var vcDtiToTime = app.lookup("dtiToTime");
					var voInitValue = app.getHostProperty("initValue");
					
					if (voInitValue) {
						
						var vsEnableExp = voInitValue["enableDateExp"];
						/** @type String */
						var vsFormat = voInitValue["format"];
						if (vsEnableExp != "" && vsEnableExp != null) {
							vcStCal.enabledDateExp = vsEnableExp;
							vcEdCal.enabledDateExp = vsEnableExp;
						}
						
						if (vsFormat != "" && vsFormat != null) {
							vcStCal.format = vsFormat;
							vcEdCal.format = vsFormat;
							
							//TODO should refactoring
							var vbUseTime = voInitValue["useTimeFormat"];
							if (vbUseTime) {
								vcDtiFromTime.format = vsFormat;
								vcDtiFromTime.visible = true;
								vcDtiToTime.format = vsFormat;
								vcDtiToTime.visible = true;
							} else {
								vcDtiFromTime.visible = false;
								vcDtiToTime.visible = false;
							}
						}
						
						var vsClassName = voInitValue["className"];
						if (vsClassName != "" && vsClassName != null) {
							vcStCal.style.addClass(vsClassName);
							vcEdCal.style.addClass(vsClassName);
						}
						
						var vsFromDate = voInitValue["fromDate"];
						var vsEndDate = voInitValue["toDate"];
						var vaDate = [];
						if (!(vsFromDate == null || vsFromDate == "null")) {
							vaDate.push(vsFromDate);
						}
						if (!(vsEndDate == null || vsEndDate == "null")) {
							vaDate.push(vsEndDate);
						}
						vcStCal.values = vaDate;
						vcEdCal.values = vaDate;
						
						if (vsFromDate != "" && vsFromDate != null) {
							vcStCal.navigate(moment(vsFromDate, vsFormat));
						}
						
						if (vsEndDate != "" && vsEndDate != null) {
							vcEdCal.navigate(moment(vsEndDate, vsFormat));
						}
						vcStCal.focus();
						
						/** @type Boolean */
						var vbUseAutoSelect = voInitValue["useAutoSelect"];
						var bodyLayout = app.getContainer().getLayout();
						bodyLayout.setColumnVisible(0, vbUseAutoSelect);
						
					}
				}
	
				/*
				 * 데이트 인풋에서 value-change 이벤트 발생 시 호출.
				 * Dateinput의 value를 변경하여 변경된 값이 저장된 후에 발생하는 이벤트.
				 */
				function onDtiFromTimeValueChange( /* cpr.events.CValueChangeEvent */ e) {
					/** 
					 * @type cpr.controls.DateInput
					 */
					var dtiFromTime = e.control;
					var vcStCal = app.lookup("cal1");
					var vcEdCal = app.lookup("cal2");
					var vaValues = vcStCal.values;
					
					vcStCal.putValues([dtiFromTime.value, vaValues[1]]);
					vcEdCal.putValues([dtiFromTime.value, vaValues[1]]);
					vcStCal.navigate(moment(dtiFromTime.value, vcStCal.format));
				}
	
				/*
				 * 데이트 인풋에서 value-change 이벤트 발생 시 호출.
				 * Dateinput의 value를 변경하여 변경된 값이 저장된 후에 발생하는 이벤트.
				 */
				function onDtiToTimeValueChange( /* cpr.events.CValueChangeEvent */ e) {
					/** 
					 * @type cpr.controls.DateInput
					 */
					var dtiToTime = e.control;
					var vcStCal = app.lookup("cal1");
					var vcEdCal = app.lookup("cal2");
					var vaValues = vcStCal.values;
					
					vcStCal.putValues([vaValues[0], dtiToTime.value]);
					vcEdCal.putValues([vaValues[0], dtiToTime.value]);
					vcStCal.navigate(moment(vaValues[0], vcStCal.format));
				}
	
				/*
				 * "금주" 버튼(btn1)에서 click 이벤트 발생 시 호출.
				 * 사용자가 컨트롤을 클릭할 때 발생하는 이벤트.
				 */
				function onBtn1Click( /* cpr.events.CMouseEvent */ e) {
					var vcStCal = app.lookup("cal1");
					var vcEdCal = app.lookup("cal2");
					
					var sunday = sundayMaker(vcStCal);
					var saturday = saturdayMaker(vcStCal);
					vcStCal.putValues([sunday, saturday]);
					vcEdCal.putValues([sunday, saturday]);
				}
	
				function sundayMaker(vcCal) {
					var defaultDate = vcCal.defaultDate;
					var year = defaultDate.getFullYear();
					var month = defaultDate.getMonth() + 1;
					
					//요일에 따른 월요일 계산
					var week = defaultDate.getDay();
					if (week == 0) {
						week = 7;
					}
					
					var date;
					if (week != 0) {
						date = defaultDate.getDate() - (week);
						
						//전 달로 넘어갔는지 체크
						if (date < 1) {
							var preMaxDate = new Date(year, month - 1, 0);
							month = month - 1;
							date = preMaxDate.getDate() + date;
							
							//전 년도로 넘어갔는지 체크
							if (month == 0) {
								month = 12;
								year = year - 1;
							}
						}
					}
					
					//달이 한자리 수인지 체크 (한자리 수 일 경우 앞에 0 추가)
					if (month < 10) {
						month = '0' + month;
					}
					
					return year + "" + month + "" + date + "";
				}
	
				function saturdayMaker(vcCal) {
					var defaultDate = vcCal.defaultDate;
					var year = defaultDate.getFullYear();
					var month = defaultDate.getMonth() + 1;
					
					//요일에 따른 일요일 계산
					var week = defaultDate.getDay();
					if (week == 0) {
						week = 7;
					}
					week = 6 - week;
					
					//다음 달로 넘어갔는지 체크
					var currentMaxDate = new Date(year, month, 0).getDate();
					
					var date = defaultDate.getDate() + week;
					if (currentMaxDate < date) {
						month = month + 1;
						date = date - currentMaxDate;
					}
					
					//다음 년도로 넘어갔는지 체크
					if (month == 13) {
						year = year + 1;
						month = 1;
					}
					
					//달이 한자리 수인지 체크 (한자리 수 일 경우 앞에 0 추가)
					if (month < 10) {
						month = '0' + month;
					}
					
					return year + "" + month + "" + date + "";
				}
	
				/*
				 * "전주" 버튼(btn2)에서 click 이벤트 발생 시 호출.
				 * 사용자가 컨트롤을 클릭할 때 발생하는 이벤트.
				 */
				function onBtn2Click( /* cpr.events.CMouseEvent */ e) {
					var vcStCal = app.lookup("cal1");
					var vcEdCal = app.lookup("cal2");
					
					var sunday = preSundayMaker(vcStCal);
					var saturday = preSaturdayMaker(vcStCal);
					vcStCal.putValues([sunday, saturday]);
					vcEdCal.putValues([sunday, saturday]);
				}
	
				function preSundayMaker(vcCal) {
					var defaultDate = vcCal.defaultDate;
					var year = defaultDate.getFullYear();
					var month = defaultDate.getMonth() + 1;
					
					//요일에 따른 월요일 계산
					var week = defaultDate.getDay();
					if (week == 0) {
						week = 7;
					}
					
					var date;
					if (week != 0) {
						//전 달로 넘어갔는지 체크
						date = defaultDate.getDate() - (week) - 7;
						if (date < 1) {
							var preMaxDate = new Date(year, month - 1, 0);
							month = month - 1;
							date = preMaxDate.getDate() + date;
							
							//전 년도로 넘어갔는지 체크
							if (month == 0) {
								month = 12;
								year = year - 1;
							}
						}
					}
					
					//달이 한자리 수인지 체크 (한자리 수 일 경우 앞에 0 추가)
					if (month < 10) {
						month = '0' + month;
					}
					
					return year + "" + month + "" + date + "";
				}
	
				function preSaturdayMaker(vcCal) {
					var defaultDate = vcCal.defaultDate;
					var year = defaultDate.getFullYear();
					var month = defaultDate.getMonth() + 1;
					var date;
					
					//요일에 따른 일요일 계산
					var week = defaultDate.getDay();
					if (week == 0) {
						week = 7;
					}
					week = 7 - (7 - week);
					
					//전 달로 넘어갔는지 체크
					date = defaultDate.getDate() - week - 1;
					if (date < 1) {
						var preMaxDate = new Date(year, month - 1, 0);
						month = month - 1;
						date = preMaxDate.getDate() + date;
						
						//전 년도로 넘어갔는지 체크
						if (month == 0) {
							month = 12;
							year = year - 1;
						}
					}
					
					//다음 달로 넘어갔는지 체크
					//달이 한자리 수인지 체크 (한자리 수 일 경우 앞에 0 추가)
					if (month < 10) {
						month = '0' + month;
					}
					
					return year + "" + month + "" + date + "";
				}
	
				/*
				 * "당월" 버튼(btn3)에서 click 이벤트 발생 시 호출.
				 * 사용자가 컨트롤을 클릭할 때 발생하는 이벤트.
				 */
				function onBtn3Click( /* cpr.events.CMouseEvent */ e) {
					var vcStCal = app.lookup("cal1");
					var vcEdCal = app.lookup("cal2");
					var year = vcStCal.defaultDate.getFullYear();
					var month = vcStCal.defaultDate.getMonth() + 1;
					var maxDate = new Date(year, month, 0).getDate();
					
					if (month < 10) {
						month = '0' + month;
					}
					
					var start = year + "" + month + "" + '01';
					var end = year + "" + month + "" + maxDate;
					
					vcStCal.putValues([start, end]);
					vcEdCal.putValues([start, end]);
				}
	
				/*
				 * "전월" 버튼(btn4)에서 click 이벤트 발생 시 호출.
				 * 사용자가 컨트롤을 클릭할 때 발생하는 이벤트.
				 */
				function onBtn4Click( /* cpr.events.CMouseEvent */ e) {
					var vcStCal = app.lookup("cal1");
					var vcEdCal = app.lookup("cal2");
					var year = vcStCal.defaultDate.getFullYear();
					var month = vcStCal.defaultDate.getMonth();
					
					if (month == 0) {
						year = year - 1;
						month = 12;
					}
					
					var maxDate = new Date(year, month, 0).getDate();
					
					if (month < 10) {
						month = '0' + month;
					}
					
					var start = year + "" + month + "" + '01';
					var end = year + "" + month + "" + maxDate;
					vcStCal.putValues([start, end]);
					vcEdCal.putValues([start, end]);
				}
	
				/*
				 * "당분기" 버튼(btn5)에서 click 이벤트 발생 시 호출.
				 * 사용자가 컨트롤을 클릭할 때 발생하는 이벤트.
				 */
				function onBtn5Click( /* cpr.events.CMouseEvent */ e) {
					var cal1 = app.lookup("cal1");
					var cal2 = app.lookup("cal2");
					var defaultDate = cal1.defaultDate;
					var year = defaultDate.getFullYear();
					var month = defaultDate.getMonth() + 1;
					var startMonth;
					
					//분기 체크
					if (month % 3 == 0) {
						month = month - 2;
					} else if (month % 3 == 2) {
						startMonth = month - 1;
					}
					
					//month 2자리수로 만듬
					if (startMonth < 10) {
						startMonth = '0' + startMonth;
					}
					
					var endMonth = '0' + (month + 2);
					
					// month가 8월 이상일 경우 앞에 '0' 자름
					if (endMonth.length >= 3) {
						endMonth = endMonth.slice(1);
					}
					
					var maxDate = new Date(year, endMonth, 0).getDate();
					
					var start = year + '' + startMonth + '' + '01';
					var end = year + '' + endMonth + '' + maxDate;
					
					var navStart = year + '-' + startMonth + '-' + '01';
					
					cal1.putValues([start, end]);
					cal2.putValues([start, end]);
					cal1.navigate(new Date(navStart));
				}
	
				/*
				 * "전분기" 버튼(btn6)에서 click 이벤트 발생 시 호출.
				 * 사용자가 컨트롤을 클릭할 때 발생하는 이벤트.
				 */
				function onBtn6Click( /* cpr.events.CMouseEvent */ e) {
					var cal1 = app.lookup("cal1");
					var cal2 = app.lookup("cal2");
					
					var defaultDate = cal1.defaultDate;
					var year = defaultDate.getFullYear();
					var month = defaultDate.getMonth() - 2;
					var startMonth;
					
					//전 년도로 넘어갔을 경우
					if (month < 1) {
						year = year - 1;
						month = 12 + month;
					}
					
					//분기 체크
					if (month % 3 == 0) {
						startMonth = month - 2;
					} else if (month % 3 == 2) {
						startMonth = month - 1;
					} else {
						startMonth = month;
					}
					
					var endMonth = startMonth + 2;
					
					//month 2자리수로 만듬
					if (startMonth < 10) {
						startMonth = '0' + startMonth;
					}
					
					if (endMonth < 10) {
						var endMonth = '0' + endMonth;
					}
					
					var maxDate = new Date(year, endMonth, 0).getDate();
					
					var start = year + '' + startMonth + '' + '01'
					var end = year + '' + endMonth + '' + maxDate;
					
					var navStart = year + '-' + startMonth + '-' + '01';
					
					cal1.putValues([start, end]);
					cal2.putValues([start, end]);
					cal1.navigate(new Date(navStart));
				}
				/*
				 * "금년(전체)" 버튼(btn8)에서 click 이벤트 발생 시 호출.
				 * 사용자가 컨트롤을 클릭할 때 발생하는 이벤트.
				 */
				function onBtn8Click( /* cpr.events.CMouseEvent */ e) {
					var vcStCal = app.lookup("cal1");
					var vcEdCal = app.lookup("cal2");
					
					var year = vcStCal.defaultDate.getFullYear();
					var start = year + '0101';
					var end = year + '1231';
					vcStCal.putValues([start, end]);
					vcEdCal.putValues([start, end]);
					
					var navStart = year + '-01-01';
					vcStCal.navigate(new Date(navStart));
				}
	
				/*
				 * "전년(전체)" 버튼(btn10)에서 click 이벤트 발생 시 호출.
				 * 사용자가 컨트롤을 클릭할 때 발생하는 이벤트.
				 */
				function onBtn10Click( /* cpr.events.CMouseEvent */ e) {
					var vcStCal = app.lookup("cal1");
					var vcEdCal = app.lookup("cal2");
					
					var year = vcStCal.defaultDate.getFullYear() - 1;
					var start = year + '0101';
					var end = year + '1231';
					vcStCal.putValues([start, end]);
					vcEdCal.putValues([start, end]);
					
					var navStart = year + '-01-01';
					vcStCal.navigate(new Date(navStart));
				}
				// End - User Script
				
				// Header
				app.supportMedia("all and (min-width: 1024px)", "default");
				app.supportMedia("all and (min-width: 500px) and (max-width: 1023px)", "tablet");
				app.supportMedia("all and (max-width: 499px)", "mobile");
				
				// Configure root container
				var container = app.getContainer();
				container.style.css({
					"width" : "100%",
					"top" : "0px",
					"height" : "100%",
					"left" : "0px"
				});
				
				// Layout
				var formLayout_1 = new cpr.controls.layouts.FormLayout();
				formLayout_1.scrollable = false;
				formLayout_1.topMargin = "10px";
				formLayout_1.rightMargin = "10px";
				formLayout_1.bottomMargin = "10px";
				formLayout_1.leftMargin = "10px";
				formLayout_1.horizontalSpacing = "5px";
				formLayout_1.verticalSpacing = "5px";
				formLayout_1.setColumns(["1fr", "1fr", "1fr"]);
				formLayout_1.setColumnVisible(0, false);
				formLayout_1.setRows(["1fr", "30px", "30px"]);
				container.setLayout(formLayout_1);
				
				// UI Configuration
				var calendar_1 = new cpr.controls.Calendar("cal2");
				calendar_1.footerVisible = false;
				calendar_1.format = "YYYY-MM-DD";
				calendar_1.selectionType = "range";
				if(typeof onCal2BeforeValueChange == "function") {
					calendar_1.addEventListener("before-value-change", onCal2BeforeValueChange);
				}
				container.addChild(calendar_1, {
					"colIndex": 2,
					"rowIndex": 0
				});
				
				var calendar_2 = new cpr.controls.Calendar("cal1");
				calendar_2.footerVisible = false;
				calendar_2.format = "YYYY-MM-DD";
				calendar_2.selectionType = "range";
				if(typeof onCal1BeforeValueChange == "function") {
					calendar_2.addEventListener("before-value-change", onCal1BeforeValueChange);
				}
				if(typeof onCal1ValueChange == "function") {
					calendar_2.addEventListener("value-change", onCal1ValueChange);
				}
				container.addChild(calendar_2, {
					"colIndex": 1,
					"rowIndex": 0
				});
				
				var group_1 = new cpr.controls.Container("grp1");
				var flowLayout_1 = new cpr.controls.layouts.FlowLayout();
				flowLayout_1.scrollable = false;
				flowLayout_1.horizontalAlign = "right";
				group_1.setLayout(flowLayout_1);
				(function(container){
					var button_1 = new cpr.controls.Button("btnOK");
					button_1.value = "Apply";
					if(typeof onBtnOKClick == "function") {
						button_1.addEventListener("click", onBtnOKClick);
					}
					container.addChild(button_1, {
						"width": "100px",
						"height": "30px"
					});
					var button_2 = new cpr.controls.Button("btnCancel");
					button_2.value = "Cancel";
					if(typeof onBtnCancelClick == "function") {
						button_2.addEventListener("click", onBtnCancelClick);
					}
					container.addChild(button_2, {
						"width": "100px",
						"height": "30px"
					});
				})(group_1);
				container.addChild(group_1, {
					"colIndex": 2,
					"rowIndex": 2
				});
				
				var dateInput_1 = new cpr.controls.DateInput("dtiFromTime");
				dateInput_1.hideButton = true;
				dateInput_1.placeholder = "시:분:초";
				dateInput_1.mask = "HH:mm:ss";
				dateInput_1.format = "hh:mm:ss";
				if(typeof onDtiFromTimeValueChange == "function") {
					dateInput_1.addEventListener("value-change", onDtiFromTimeValueChange);
				}
				container.addChild(dateInput_1, {
					"colIndex": 1,
					"rowIndex": 1,
					"horizontalAlign": "center",
					"verticalAlign": "fill",
					"width": 150
				});
				
				var dateInput_2 = new cpr.controls.DateInput("dtiToTime");
				dateInput_2.hideButton = true;
				dateInput_2.placeholder = "시:분:초";
				dateInput_2.mask = "HH:mm:ss";
				dateInput_2.format = "hh:mm:ss";
				if(typeof onDtiToTimeValueChange == "function") {
					dateInput_2.addEventListener("value-change", onDtiToTimeValueChange);
				}
				container.addChild(dateInput_2, {
					"colIndex": 2,
					"rowIndex": 1,
					"horizontalAlign": "center",
					"verticalAlign": "fill",
					"width": 150
				});
				
				var group_2 = new cpr.controls.Container("grp2");
				var formLayout_2 = new cpr.controls.layouts.FormLayout();
				formLayout_2.scrollable = false;
				formLayout_2.topMargin = "5px";
				formLayout_2.rightMargin = "5px";
				formLayout_2.bottomMargin = "5px";
				formLayout_2.leftMargin = "5px";
				formLayout_2.horizontalSpacing = "10px";
				formLayout_2.verticalSpacing = "10px";
				formLayout_2.setColumns(["1fr", "1fr"]);
				formLayout_2.setRows(["35px", "1fr", "1fr", "1fr", "1fr"]);
				group_2.setLayout(formLayout_2);
				(function(container){
					var output_1 = new cpr.controls.Output();
					output_1.value = "자동선택";
					output_1.style.css({
						"background-color" : "#62b5e5",
						"color" : "#ffffff",
						"text-align" : "center"
					});
					container.addChild(output_1, {
						"colIndex": 0,
						"rowIndex": 0,
						"colSpan": 2,
						"rowSpan": 1
					});
					var button_3 = new cpr.controls.Button("btn1");
					button_3.value = "금주";
					if(typeof onBtn1Click == "function") {
						button_3.addEventListener("click", onBtn1Click);
					}
					container.addChild(button_3, {
						"colIndex": 0,
						"rowIndex": 1
					});
					var button_4 = new cpr.controls.Button("btn3");
					button_4.value = "당월";
					if(typeof onBtn3Click == "function") {
						button_4.addEventListener("click", onBtn3Click);
					}
					container.addChild(button_4, {
						"colIndex": 0,
						"rowIndex": 2
					});
					var button_5 = new cpr.controls.Button("btn5");
					button_5.value = "당분기";
					if(typeof onBtn5Click == "function") {
						button_5.addEventListener("click", onBtn5Click);
					}
					container.addChild(button_5, {
						"colIndex": 0,
						"rowIndex": 3
					});
					var button_6 = new cpr.controls.Button("btn2");
					button_6.value = "전주";
					if(typeof onBtn2Click == "function") {
						button_6.addEventListener("click", onBtn2Click);
					}
					container.addChild(button_6, {
						"colIndex": 1,
						"rowIndex": 1
					});
					var button_7 = new cpr.controls.Button("btn4");
					button_7.value = "전월";
					if(typeof onBtn4Click == "function") {
						button_7.addEventListener("click", onBtn4Click);
					}
					container.addChild(button_7, {
						"colIndex": 1,
						"rowIndex": 2
					});
					var button_8 = new cpr.controls.Button("btn6");
					button_8.value = "전분기";
					if(typeof onBtn6Click == "function") {
						button_8.addEventListener("click", onBtn6Click);
					}
					container.addChild(button_8, {
						"colIndex": 1,
						"rowIndex": 3
					});
					var button_9 = new cpr.controls.Button("btn8");
					button_9.value = "금년(전체)";
					if(typeof onBtn8Click == "function") {
						button_9.addEventListener("click", onBtn8Click);
					}
					container.addChild(button_9, {
						"colIndex": 0,
						"rowIndex": 4
					});
					var button_10 = new cpr.controls.Button("btn10");
					button_10.value = "전년(전체)";
					if(typeof onBtn10Click == "function") {
						button_10.addEventListener("click", onBtn10Click);
					}
					container.addChild(button_10, {
						"colIndex": 1,
						"rowIndex": 4
					});
				})(group_2);
				container.addChild(group_2, {
					"colIndex": 0,
					"rowIndex": 0
				});
				if(typeof onBodyLoad == "function"){
					app.addEventListener("load", onBodyLoad);
				}
				if(typeof onBodyInit == "function"){
					app.addEventListener("init", onBodyInit);
				}
			}
		});
	internalApp.title = "FromTo캘린더";
	
	// Type declaration for SelectDatePopup_POP
	cpr.utils.Util.ensurePackage("udc.exam").SelectDatePopup_POP = function(id){
		cpr.controls.UDCBase.call(this, "udc.exam.SelectDatePopup_POP", internalApp, id);
	};
	
	udc.exam.SelectDatePopup_POP.prototype = Object.create(cpr.controls.UDCBase.prototype);
	Object.defineProperty(udc.exam.SelectDatePopup_POP.prototype, "type", {
		get : function(){
			return "udc.exam.SelectDatePopup_POP";
		},
		
		configurable: true
	});
	
	// App Properties
	
	// Register type into the Platform and package
	cpr.core.Platform.INSTANCE.register(internalApp);
})();
/// end - udc.exam.SelectDatePopup_POP
/// start - udc.exam.udcExamDuoDatePicker
/*
 * UDC Qualified Name: udc.exam.udcExamDuoDatePicker
 * App URI: udc/exam/udcExamDuoDatePicker
 * Source Location: udc/exam/udcExamDuoDatePicker.clx
 *
 * This file was generated by eXBuilder6 compiler(1.0.4584), Don't edit manually.
 */
(function(){
	// App Declaration
		var internalApp = new cpr.core.App("udc/exam/udcExamDuoDatePicker", { 
			onPrepare: function(loader) {
			},
			onCreate: function(/* cpr.core.AppInstance */ app, exports) {
				var linker = {};
				// Start - User Script
				/************************************************
				 * udcExamDuoDatePicker.js
				 * Created at 2021. 12. 10. 오전 8:51:15.
				 *
				 * @author HANS
				 ************************************************/
	
				/**
				 * 날짜 선택 다이얼로그 너비 크기
				 * @type {Number}
				 */
				var mnDpWidth = 600;
	
				/**
				 * 날짜 선택 다이얼로그 높이 크기
				 * @type {Number}
				 */
				var mnDpHeight = 360;
	
				/**
				 * 
				 * @param {String} psAppProp
				 */
				function getClassValid(psAppProp) {
					var result = "";
					if (psAppProp != "" && psAppProp != null) {
						psAppProp = psAppProp.trim();
						result = psAppProp;
					}
					return result;
				}
	
				exports.getClassValid = getClassValid;
	
				/**
				 * UDC 컨트롤이 그리드의 뷰 모드에서 표시할 텍스트를 반환합니다.
				 */
				exports.getText = function() {
					// TODO: 그리드의 뷰 모드에서 표시할 텍스트를 반환하는 하는 코드를 작성해야 합니다.
					return "";
				};
	
				exports.getValues = function() {
					var vsFromValue = app.getAppProperty("fromValue");
					var vsToValue = app.getAppProperty("toValue");
					var vsFormat = app.getAppProperty("format");
					var vsMask = app.getAppProperty("mask");
					var vsFromDate = "";
					var vsEndDate = "";
					if (vsFromValue != null && vsFromValue != "") {
						
						var voTempFrom = moment(vsFromValue, vsFormat);
						if (voTempFrom.isValid()) {
							vsFromDate = voTempFrom.format(vsMask);
						}
					}
					if (vsToValue != null && vsToValue != "") {
						
						var voTempEnd = moment(vsToValue, vsFormat);
						if (voTempEnd.isValid()) {
							vsEndDate = voTempEnd.format(vsMask);
						}
					}
					
					return [vsFromDate, vsEndDate];
				}
	
				/**
				 * 현재 최상위 앱과 겹치는 영역이 있는지 확인하고,
				 * 다이얼로그가 열릴 위치를 반환합니다.
				 * @param {{width:Number,height:Number,top:Number,left:Number}} poDpConstraint
				 * @param {cpr.geometry.Rectangle} poHostRect
				 * @return {cpr.controls.layouts.Constraint}
				 */
				function getBoundingClientRect(poDpConstraint, poHostRect) {
					var voRootAppIns = app.getRootAppInstance();
					var vcRootCont = voRootAppIns.getContainer();
					var voRootActlRect = vcRootCont.getActualRect();
					
					var voDpHostRect = poHostRect;
					var voDpConstraint = poDpConstraint;
					
					var voNewConstraint = {
						width: voDpConstraint.width,
						height: voDpConstraint.height
					};
					
					var vnIntrsctH = voDpConstraint.top + voDpConstraint.height;
					var vnIntrsctW = voDpConstraint.left + voDpConstraint.width;
					
					if (voRootActlRect.height < vnIntrsctH) { // 높이가 벗어나는 경우
						voNewConstraint["top"] = voDpConstraint.top - voDpConstraint.height - voDpHostRect.height;
					} else {
						voNewConstraint["top"] = voDpConstraint.top;
					}
					
					if (voRootActlRect.width < vnIntrsctW) {
						voNewConstraint["right"] = voRootActlRect.width - voDpHostRect.right;
					} else {
						voNewConstraint["left"] = voDpConstraint.left;
					}
					
					return voNewConstraint;
				}
	
				/*
				 * 데이트 인풋에서 click 이벤트 발생 시 호출.
				 * 사용자가 컨트롤을 클릭할 때 발생하는 이벤트.
				 */
				function onDtiClick( /* cpr.events.CMouseEvent */ e) {
					/** 
					 * @type cpr.controls.DateInput
					 */
					var dtiFrom = e.control;
					
					var vnReadOnly = app.getHost().readOnly;
					if (vnReadOnly || e.target.getAttribute("class") == 'cl-dateinput-clear') {
						return;
					}
					var voHostRect = app.getHost().getActualRect(); // 현 UDC의 Rect
					var voDpProp = { // 다이얼로그 프롭
						width: mnDpWidth,
						height: mnDpHeight,
						top: voHostRect.bottom,
						left: voHostRect.left
					}
					
					/* 다이얼로그가 열릴 위치를 계산하여 적절한 다이얼로그를 엽니다. */
					var voReplaceConstraint = getBoundingClientRect(voDpProp, voHostRect);
					
					app.getRootAppInstance().dialogManager.openDialog("udc/exam/SelectDatePopup_POP", "DuoCalendar", voReplaceConstraint, function(dialog) {
						dialog.headerVisible = false; // 다이얼로그 헤더 visible
						dialog.resizable = false; // 다이얼로그 resize
						dialog.style.overlay.css("background-color", "transparent");
						dialog.style.setClasses("datepicker-modal");
						dialog.initValue = {
							selectOption: app.getAppProperty("selectOption")
						}
						dialog.ready(function(dialogApp) {
							//TODO 앱의 초기값을 설정하십시오.
							dialogApp.initValue = {
								fromDate: app.getAppProperty("fromValue"),
								toDate: app.getAppProperty("toValue"),
								format: app.getAppProperty("format"),
								enableDateExp: app.getAppProperty("enabledDateExp"),
								className: getClassValid(app.getAppProperty("calendarClass")),
								useTimeFormat: app.getAppProperty("useTimeFormat"),
								useAutoSelect: app.getAppProperty("useAutoSelect")
							}
							var voOpenEv = new cpr.events.CUIEvent("open");
							app.dispatchEvent(voOpenEv);
						});
						
						/* 오버레이 클릭 시 다이얼로그가 닫히며 값이 설정되도록 함 */
						dialog.addEventListener("overlay-click", function(e) {
							dialog.close();
						});
						
						/* ESC키를 누를 때 데이트피커 다이얼로그가 닫히도록 함 */
						dialog.addEventListener("keydown", function(e) {
							if (e.keyCode == cpr.events.KeyCode.ESC) {
								e.control.close();
							}
						});
						
						/* 다이얼로그가 닫혔을 때 발생하는 이벤트 정의 */
						dialog.addEventListener("close", function(e) {
							var dialog = e.control;
							
							var voCloseEv = new cpr.events.CUIEvent("close");
							app.dispatchEvent(voCloseEv);
							
							var vsRtrnVal = dialog.returnValue; // 반환 값
							if (vsRtrnVal) {
								
								var vsFromValue = app.getAppProperty("fromValue");
								var vsToValue = app.getAppProperty("toValue");
								
								var vaOldValue = [vsFromValue, vsToValue];
								var vsOldValue = vaOldValue.join(",");
								vsOldValue == "," ? null : vsOldValue;
								/** @type String[] */
								var vaNewValue = vsRtrnVal;
								var voBVCEvt = new cpr.events.CValueChangeEvent("before-value-change", {
									oldValue: vsOldValue,
									newValue: vaNewValue.join(",")
								});
								var vbIsPrevented = app.dispatchEvent(voBVCEvt);
								
								if (!voBVCEvt.defaultPrevented) {
									
									app.setAppProperty("fromValue", vsRtrnVal[0]);
									app.setAppProperty("toValue", vsRtrnVal[1]);
									
									var voVCEvt = new cpr.events.CValueChangeEvent("value-change", {
										oldValue: vsOldValue,
										newValue: vaNewValue.join(",")
									});
									app.dispatchEvent(voVCEvt);
								}
								
								app.lookup("dtiFrom").redraw();
								app.lookup("dtiTo").redraw();
							}
						});
					});
				}
	
				/*
				 * "X" 버튼(btnClear)에서 click 이벤트 발생 시 호출.
				 * 사용자가 컨트롤을 클릭할 때 발생하는 이벤트.
				 */
				function onBtnClearClick( /* cpr.events.CMouseEvent */ e) {
					/** 
					 * @type cpr.controls.Button
					 */
					var btnClear = e.control;
					app.lookup("dtiFrom").clear();
					app.lookup("dtiTo").clear();
					
					var voClearEvt = new cpr.events.CUIEvent("clear");
					app.dispatchEvent(voClearEvt);
				}
	
				function changeType() {
					
					var vsSelectType = app.getAppProperty("selectOption");
					
					switch (vsSelectType) {
						case "date": //과년도 동일일
							break;
						case "day":
							break;
						case "dayofweek":
							break;
						case "month":
							break;
						default:
							break;
					}
				}
				/*
				 * 루트 컨테이너에서 load 이벤트 발생 시 호출.
				 * 앱이 최초 구성된후 최초 랜더링 직후에 발생하는 이벤트 입니다.
				 */
				function onBodyLoad( /* cpr.events.CEvent */ e) {
					
				}
	
				/*
				 * 데이트 인풋에서 clear 이벤트 발생 시 호출.
				 * 인풋박스에서 esc키 또는 클리어버튼을 클릭하여 인풋의 값이 Clear될때 발생하는 이벤트
				 */
				function onDtiToClear( /* cpr.events.CUIEvent */ e) {
					/** 
					 * @type cpr.controls.DateInput
					 */
					var dtiTo = e.control;
					
					app.lookup("dtiFrom").clear();
				}
				// End - User Script
				
				// Header
				app.declareAppProperty("format", "YYYYMMDD");
				app.declareAppProperty("mask", "YYYY-MM-DD");
				app.declareAppProperty("enabledDateExp", null);
				app.declareBindableAppProperty("fromValue", null);
				app.declareBindableAppProperty("toValue", null);
				app.declareAppProperty("dateInputClass", null);
				app.declareAppProperty("calendarClass", null);
				app.declareAppProperty("useTimeFormat", false);
				app.declareAppProperty("selectOption", "date");
				app.declareAppProperty("useAutoSelect", false);
				app.supportMedia("all and (min-width: 1024px)", "default");
				app.supportMedia("all and (min-width: 500px) and (max-width: 1023px)", "tablet");
				app.supportMedia("all and (max-width: 499px)", "mobile");
				
				// Configure root container
				var container = app.getContainer();
				container.style.setClasses(["datepickers"]);
				container.style.css({
					"width" : "100%",
					"top" : "0px",
					"height" : "100%",
					"left" : "0px"
				});
				
				// Layout
				var formLayout_1 = new cpr.controls.layouts.FormLayout();
				formLayout_1.scrollable = false;
				formLayout_1.horizontalSpacing = "0px";
				formLayout_1.verticalSpacing = "0px";
				formLayout_1.setColumns(["1fr", "20px", "1fr", "30px"]);
				formLayout_1.setColumnVisible(3, false);
				formLayout_1.setRows(["1fr"]);
				container.setLayout(formLayout_1);
				
				// UI Configuration
				var dateInput_1 = new cpr.controls.DateInput("dtiFrom");
				dateInput_1.hideButton = true;
				dateInput_1.placeholder = "시작일";
				dateInput_1.bind("value").toAppProperty("fromValue");
				dateInput_1.bind("format").toAppProperty("format");
				dateInput_1.bind("mask").toAppProperty("mask");
				dateInput_1.style.bindClass().toExpression("@getClassValid(@dateInputClass) != \"\" ? @dateInputClass : \"datepicker\"");
				if(typeof onDtiClick == "function") {
					dateInput_1.addEventListener("click", onDtiClick);
				}
				container.addChild(dateInput_1, {
					"colIndex": 0,
					"rowIndex": 0
				});
				
				var dateInput_2 = new cpr.controls.DateInput("dtiTo");
				dateInput_2.hideButton = true;
				dateInput_2.placeholder = "종료일";
				dateInput_2.showClearButton = true;
				dateInput_2.bind("value").toAppProperty("toValue");
				dateInput_2.bind("format").toAppProperty("format");
				dateInput_2.bind("mask").toAppProperty("mask");
				dateInput_2.style.bindClass().toExpression("@getClassValid(@dateInputClass) != \"\" ? @dateInputClass : \"datepicker\"");
				if(typeof onDtiClick == "function") {
					dateInput_2.addEventListener("click", onDtiClick);
				}
				if(typeof onDtiToClear == "function") {
					dateInput_2.addEventListener("clear", onDtiToClear);
				}
				container.addChild(dateInput_2, {
					"colIndex": 2,
					"rowIndex": 0
				});
				
				var button_1 = new cpr.controls.Button("btnClear");
				button_1.value = "X";
				button_1.style.setClasses(["btn-p-0"]);
				if(typeof onBtnClearClick == "function") {
					button_1.addEventListener("click", onBtnClearClick);
				}
				container.addChild(button_1, {
					"colIndex": 3,
					"rowIndex": 0
				});
				
				var output_1 = new cpr.controls.Output("opt1");
				output_1.value = "-";
				output_1.style.setClasses(["text-center"]);
				container.addChild(output_1, {
					"colIndex": 1,
					"rowIndex": 0
				});
				if(typeof onBodyLoad == "function"){
					app.addEventListener("load", onBodyLoad);
				}
			}
		});
	internalApp.title = "FromTo피커";
	
	// Type declaration for udcExamDuoDatePicker
	cpr.utils.Util.ensurePackage("udc.exam").udcExamDuoDatePicker = function(id){
		cpr.controls.UDCBase.call(this, "udc.exam.udcExamDuoDatePicker", internalApp, id);
	};
	
	udc.exam.udcExamDuoDatePicker.prototype = Object.create(cpr.controls.UDCBase.prototype);
	Object.defineProperty(udc.exam.udcExamDuoDatePicker.prototype, "type", {
		get : function(){
			return "udc.exam.udcExamDuoDatePicker";
		},
		
		configurable: true
	});
	
	// App Properties
	Object.defineProperty(udc.exam.udcExamDuoDatePicker.prototype, "format", {
		get: function(){
			return this.getEmbeddedAppInstance().getAppProperty("format");
		},
		set: function(newValue){
			return this.getEmbeddedAppInstance().setAppProperty("format", newValue, true);
		}
	});
	Object.defineProperty(udc.exam.udcExamDuoDatePicker.prototype, "mask", {
		get: function(){
			return this.getEmbeddedAppInstance().getAppProperty("mask");
		},
		set: function(newValue){
			return this.getEmbeddedAppInstance().setAppProperty("mask", newValue, true);
		}
	});
	Object.defineProperty(udc.exam.udcExamDuoDatePicker.prototype, "enabledDateExp", {
		get: function(){
			return this.getEmbeddedAppInstance().getAppProperty("enabledDateExp");
		},
		set: function(newValue){
			return this.getEmbeddedAppInstance().setAppProperty("enabledDateExp", newValue, true);
		}
	});
	Object.defineProperty(udc.exam.udcExamDuoDatePicker.prototype, "fromValue", {
		get: function(){
			return this.getEmbeddedAppInstance().getAppProperty("fromValue");
		},
		set: function(newValue){
			return this.getEmbeddedAppInstance().setAppProperty("fromValue", newValue, true);
		}
	});
	Object.defineProperty(udc.exam.udcExamDuoDatePicker.prototype, "toValue", {
		get: function(){
			return this.getEmbeddedAppInstance().getAppProperty("toValue");
		},
		set: function(newValue){
			return this.getEmbeddedAppInstance().setAppProperty("toValue", newValue, true);
		}
	});
	Object.defineProperty(udc.exam.udcExamDuoDatePicker.prototype, "dateInputClass", {
		get: function(){
			return this.getEmbeddedAppInstance().getAppProperty("dateInputClass");
		},
		set: function(newValue){
			return this.getEmbeddedAppInstance().setAppProperty("dateInputClass", newValue, true);
		}
	});
	Object.defineProperty(udc.exam.udcExamDuoDatePicker.prototype, "calendarClass", {
		get: function(){
			return this.getEmbeddedAppInstance().getAppProperty("calendarClass");
		},
		set: function(newValue){
			return this.getEmbeddedAppInstance().setAppProperty("calendarClass", newValue, true);
		}
	});
	Object.defineProperty(udc.exam.udcExamDuoDatePicker.prototype, "useTimeFormat", {
		get: function(){
			return this.getEmbeddedAppInstance().getAppProperty("useTimeFormat");
		},
		set: function(newValue){
			return this.getEmbeddedAppInstance().setAppProperty("useTimeFormat", newValue, true);
		}
	});
	Object.defineProperty(udc.exam.udcExamDuoDatePicker.prototype, "selectOption", {
		get: function(){
			return this.getEmbeddedAppInstance().getAppProperty("selectOption");
		},
		set: function(newValue){
			return this.getEmbeddedAppInstance().setAppProperty("selectOption", newValue, true);
		}
	});
	Object.defineProperty(udc.exam.udcExamDuoDatePicker.prototype, "useAutoSelect", {
		get: function(){
			return this.getEmbeddedAppInstance().getAppProperty("useAutoSelect");
		},
		set: function(newValue){
			return this.getEmbeddedAppInstance().setAppProperty("useAutoSelect", newValue, true);
		}
	});
	
	// Register type into the Platform and package
	cpr.core.Platform.INSTANCE.register(internalApp);
})();
/// end - udc.exam.udcExamDuoDatePicker
/// start - udc.SelectDatePopup_POP
/*
 * UDC Qualified Name: udc.SelectDatePopup_POP
 * App URI: udc/SelectDatePopup_POP
 * Source Location: udc/SelectDatePopup_POP.clx
 *
 * This file was generated by eXBuilder6 compiler(1.0.4584), Don't edit manually.
 */
(function(){
	// App Declaration
		var internalApp = new cpr.core.App("udc/SelectDatePopup_POP", { 
			onPrepare: function(loader) {
			},
			onCreate: function(/* cpr.core.AppInstance */ app, exports) {
				var linker = {};
				// Start - User Script
				/************************************************
				 * smpUdcSelectDatePopup_POP.js
				 * Created at 2021. 12. 10. 오전 8:53:22.
				 *
				 * @author HANS
				 ************************************************/
	
				var msSelectOption = "";
	
				/*
				 * 캘린더에서 before-value-change 이벤트 발생 시 호출.
				 * Calendar의 value를 변경하여 변경된 값이 저장되기 전에 발생하는 이벤트. 다음 이벤트로 value-change가 발생합니다.
				 */
				function onCal1BeforeValueChange( /* cpr.events.CValueChangeEvent */ e) {
					/** 
					 * @type cpr.controls.Calendar
					 */
					var vcStCal = e.control;
					var vsNewValue = e.newValue;
					var vcEdCal = app.lookup("cal2");
					vcEdCal.putValues([vsNewValue]);
					
					var vsNextMont = moment(vcEdCal.current).add(1, "month");
					vcEdCal.navigate(vsNextMont);
					
					var vaFromTime = vsNewValue.split(vcStCal.delimiter);
					var vsFromTime = vaFromTime[0];
					app.lookup("dtiFromTime").putValue(vsFromTime);
				}
	
				/*
				 * 캘린더에서 before-value-change 이벤트 발생 시 호출.
				 * Calendar의 value를 변경하여 변경된 값이 저장되기 전에 발생하는 이벤트. 다음 이벤트로 value-change가 발생합니다.
				 */
				function onCal2BeforeValueChange( /* cpr.events.CValueChangeEvent */ e) {
					/** 
					 * @type cpr.controls.Calendar
					 */
					var vcEdCal = e.control;
					var vcStCal = app.lookup("cal1");
					var vsOldValue = e.oldValue;
					var vsDelimeter = vcEdCal.delimiter;
					
					var vsOldCheck = vsOldValue.replace(vsDelimeter, "");
					var vsNewValue = e.newValue;
					if (vsOldCheck != null && vsOldCheck != "") {
						
						vsOldValue = vsOldValue.split(vcEdCal.delimiter)[0];
						if (vsNewValue.indexOf(vcEdCal.delimiter) == -1) {
							e.preventDefault();
							
							vcStCal.putValues([vsOldValue, vsNewValue]);
							vcEdCal.putValues([vsOldValue, vsNewValue]);
							
						} else {
							vcStCal.putValue(vsNewValue);
						}
						
						vcStCal.navigate(moment(vsOldValue, vcEdCal.format));
					} else {
						e.preventDefault();
						
						if (msSelectOption != "" && msSelectOption != null) {
							if (msSelectOption == "date") {
								var vsFromDate = moment(vsNewValue, vcEdCal.format).subtract(1, 'year').format(vcEdCal.format);
								vcStCal.putValues([vsFromDate, vsNewValue]);
								vcEdCal.putValues([vsFromDate, vsNewValue]);
								vcStCal.navigate(moment(vsFromDate, vcStCal.format));
								
							} else if (msSelectOption == "dayofweek") {
								var vsFromDate = moment(vsNewValue, vcEdCal.format).subtract(364, "day").format(vcEdCal.format);
								vcStCal.putValues([vsFromDate, vsNewValue]);
								vcEdCal.putValues([vsFromDate, vsNewValue]);
								vcStCal.navigate(moment(vsFromDate, vcStCal.format));
							}
						}
					}
				}
	
				/*
				 * "OK" 버튼(btnOK)에서 click 이벤트 발생 시 호출.
				 * 사용자가 컨트롤을 클릭할 때 발생하는 이벤트.
				 */
				function onBtnOKClick( /* cpr.events.CMouseEvent */ e) {
					app.close(app.lookup("cal1").values);
				}
	
				/*
				 * "Cancel" 버튼(btnCancel)에서 click 이벤트 발생 시 호출.
				 * 사용자가 컨트롤을 클릭할 때 발생하는 이벤트.
				 */
				function onBtnCancelClick( /* cpr.events.CMouseEvent */ e) {
					app.close();
				}
	
				/*
				 * 루트 컨테이너에서 init 이벤트 발생 시 호출.
				 * 앱이 최초 구성될 때 발생하는 이벤트 입니다.
				 */
				function onBodyInit( /* cpr.events.CEvent */ e) {
					var vcStCal = app.lookup("cal1");
					var vcEdCal = app.lookup("cal2")
					var voInit = app.getHostProperty("initValue");
					if (voInit != null) {
						var vsSelectOption = voInit["selectOption"];
						if (vsSelectOption == "month") {
							vcStCal.calendarType = "yearmonth";
							vcEdCal.calendarType = "yearmonth";
							
						} else {
							vcStCal.calendarType = "yearmonthdate";
							vcEdCal.calendarType = "yearmonthdate";
						}
					}
					var vsSelectOption = voInit["selectOption"];
					msSelectOption = vsSelectOption;
				}
	
				/*
				 * 루트 컨테이너에서 load 이벤트 발생 시 호출.
				 * 앱이 최초 구성된후 최초 랜더링 직후에 발생하는 이벤트 입니다.
				 */
				function onBodyLoad( /* cpr.events.CEvent */ e) {
					var vcStCal = app.lookup("cal1");
					var vcEdCal = app.lookup("cal2");
					
					var vcDtiFromTime = app.lookup("dtiFromTime");
					var vcDtiToTime = app.lookup("dtiToTime");
					var voInitValue = app.getHostProperty("initValue");
					
					if (voInitValue) {
						
						var vsEnableExp = voInitValue["enableDateExp"];
						/** @type String */
						var vsFormat = voInitValue["format"];
						if (vsEnableExp != "" && vsEnableExp != null) {
							vcStCal.enabledDateExp = vsEnableExp;
							vcEdCal.enabledDateExp = vsEnableExp;
						}
						
						if (vsFormat != "" && vsFormat != null) {
							vcStCal.format = vsFormat;
							vcEdCal.format = vsFormat;
							
							//TODO should refactoring
							var vbUseTime = voInitValue["useTimeFormat"];
							if (vbUseTime) {
								vcDtiFromTime.format = vsFormat;
								vcDtiFromTime.visible = true;
								vcDtiToTime.format = vsFormat;
								vcDtiToTime.visible = true;
							} else {
								vcDtiFromTime.visible = false;
								vcDtiToTime.visible = false;
							}
						}
						
						var vsClassName = voInitValue["className"];
						if (vsClassName != "" && vsClassName != null) {
							vcStCal.style.addClass(vsClassName);
							vcEdCal.style.addClass(vsClassName);
						}
						
						var vsFromDate = voInitValue["fromDate"];
						var vsEndDate = voInitValue["toDate"];
						var vaDate = [];
						if (!(vsFromDate == null || vsFromDate == "null")) {
							vaDate.push(vsFromDate);
						}
						if (!(vsEndDate == null || vsEndDate == "null")) {
							vaDate.push(vsEndDate);
						}
						vcStCal.values = vaDate;
						vcEdCal.values = vaDate;
						
						if (vsFromDate != "" && vsFromDate != null) {
							vcStCal.navigate(moment(vsFromDate, vsFormat));
						}
						
						if (vsEndDate != "" && vsEndDate != null) {
							vcEdCal.navigate(moment(vsEndDate, vsFormat));
						}
						vcStCal.focus();
						
						/** @type Boolean */
						var vbUseAutoSelect = voInitValue["useAutoSelect"];
						var bodyLayout = app.getContainer().getLayout();
						bodyLayout.setColumnVisible(0, vbUseAutoSelect);
						
					}
				}
	
				/*
				 * 데이트 인풋에서 value-change 이벤트 발생 시 호출.
				 * Dateinput의 value를 변경하여 변경된 값이 저장된 후에 발생하는 이벤트.
				 */
				function onDtiFromTimeValueChange( /* cpr.events.CValueChangeEvent */ e) {
					/** 
					 * @type cpr.controls.DateInput
					 */
					var dtiFromTime = e.control;
					var vcStCal = app.lookup("cal1");
					var vcEdCal = app.lookup("cal2");
					var vaValues = vcStCal.values;
					
					vcStCal.putValues([dtiFromTime.value, vaValues[1]]);
					vcEdCal.putValues([dtiFromTime.value, vaValues[1]]);
					vcStCal.navigate(moment(dtiFromTime.value, vcStCal.format));
				}
	
				/*
				 * 데이트 인풋에서 value-change 이벤트 발생 시 호출.
				 * Dateinput의 value를 변경하여 변경된 값이 저장된 후에 발생하는 이벤트.
				 */
				function onDtiToTimeValueChange( /* cpr.events.CValueChangeEvent */ e) {
					/** 
					 * @type cpr.controls.DateInput
					 */
					var dtiToTime = e.control;
					var vcStCal = app.lookup("cal1");
					var vcEdCal = app.lookup("cal2");
					var vaValues = vcStCal.values;
					
					vcStCal.putValues([vaValues[0], dtiToTime.value]);
					vcEdCal.putValues([vaValues[0], dtiToTime.value]);
					vcStCal.navigate(moment(vaValues[0], vcStCal.format));
				}
	
				/*
				 * "금주" 버튼(btn1)에서 click 이벤트 발생 시 호출.
				 * 사용자가 컨트롤을 클릭할 때 발생하는 이벤트.
				 */
				function onBtn1Click( /* cpr.events.CMouseEvent */ e) {
					var vcStCal = app.lookup("cal1");
					var vcEdCal = app.lookup("cal2");
					
					var sunday = sundayMaker(vcStCal);
					var saturday = saturdayMaker(vcStCal);
					vcStCal.putValues([sunday, saturday]);
					vcEdCal.putValues([sunday, saturday]);
				}
	
				function sundayMaker(vcCal) {
					var defaultDate = vcCal.defaultDate;
					var year = defaultDate.getFullYear();
					var month = defaultDate.getMonth() + 1;
					
					//요일에 따른 월요일 계산
					var week = defaultDate.getDay();
					if (week == 0) {
						week = 7;
					}
					
					var date;
					if (week != 0) {
						date = defaultDate.getDate() - (week);
						
						//전 달로 넘어갔는지 체크
						if (date < 1) {
							var preMaxDate = new Date(year, month - 1, 0);
							month = month - 1;
							date = preMaxDate.getDate() + date;
							
							//전 년도로 넘어갔는지 체크
							if (month == 0) {
								month = 12;
								year = year - 1;
							}
						}
					}
					
					//달이 한자리 수인지 체크 (한자리 수 일 경우 앞에 0 추가)
					if (month < 10) {
						month = '0' + month;
					}
					
					return year + "" + month + "" + date + "";
				}
	
				function saturdayMaker(vcCal) {
					var defaultDate = vcCal.defaultDate;
					var year = defaultDate.getFullYear();
					var month = defaultDate.getMonth() + 1;
					
					//요일에 따른 일요일 계산
					var week = defaultDate.getDay();
					if (week == 0) {
						week = 7;
					}
					week = 6 - week;
					
					//다음 달로 넘어갔는지 체크
					var currentMaxDate = new Date(year, month, 0).getDate();
					
					var date = defaultDate.getDate() + week;
					if (currentMaxDate < date) {
						month = month + 1;
						date = date - currentMaxDate;
					}
					
					//다음 년도로 넘어갔는지 체크
					if (month == 13) {
						year = year + 1;
						month = 1;
					}
					
					//달이 한자리 수인지 체크 (한자리 수 일 경우 앞에 0 추가)
					if (month < 10) {
						month = '0' + month;
					}
					
					return year + "" + month + "" + date + "";
				}
	
				/*
				 * "전주" 버튼(btn2)에서 click 이벤트 발생 시 호출.
				 * 사용자가 컨트롤을 클릭할 때 발생하는 이벤트.
				 */
				function onBtn2Click( /* cpr.events.CMouseEvent */ e) {
					var vcStCal = app.lookup("cal1");
					var vcEdCal = app.lookup("cal2");
					
					var sunday = preSundayMaker(vcStCal);
					var saturday = preSaturdayMaker(vcStCal);
					vcStCal.putValues([sunday, saturday]);
					vcEdCal.putValues([sunday, saturday]);
				}
	
				function preSundayMaker(vcCal) {
					var defaultDate = vcCal.defaultDate;
					var year = defaultDate.getFullYear();
					var month = defaultDate.getMonth() + 1;
					
					//요일에 따른 월요일 계산
					var week = defaultDate.getDay();
					if (week == 0) {
						week = 7;
					}
					
					var date;
					if (week != 0) {
						//전 달로 넘어갔는지 체크
						date = defaultDate.getDate() - (week) - 7;
						if (date < 1) {
							var preMaxDate = new Date(year, month - 1, 0);
							month = month - 1;
							date = preMaxDate.getDate() + date;
							
							//전 년도로 넘어갔는지 체크
							if (month == 0) {
								month = 12;
								year = year - 1;
							}
						}
					}
					
					//달이 한자리 수인지 체크 (한자리 수 일 경우 앞에 0 추가)
					if (month < 10) {
						month = '0' + month;
					}
					
					return year + "" + month + "" + date + "";
				}
	
				function preSaturdayMaker(vcCal) {
					var defaultDate = vcCal.defaultDate;
					var year = defaultDate.getFullYear();
					var month = defaultDate.getMonth() + 1;
					var date;
					
					//요일에 따른 일요일 계산
					var week = defaultDate.getDay();
					if (week == 0) {
						week = 7;
					}
					week = 7 - (7 - week);
					
					//전 달로 넘어갔는지 체크
					date = defaultDate.getDate() - week - 1;
					if (date < 1) {
						var preMaxDate = new Date(year, month - 1, 0);
						month = month - 1;
						date = preMaxDate.getDate() + date;
						
						//전 년도로 넘어갔는지 체크
						if (month == 0) {
							month = 12;
							year = year - 1;
						}
					}
					
					//다음 달로 넘어갔는지 체크
					//달이 한자리 수인지 체크 (한자리 수 일 경우 앞에 0 추가)
					if (month < 10) {
						month = '0' + month;
					}
					
					return year + "" + month + "" + date + "";
				}
	
				/*
				 * "당월" 버튼(btn3)에서 click 이벤트 발생 시 호출.
				 * 사용자가 컨트롤을 클릭할 때 발생하는 이벤트.
				 */
				function onBtn3Click( /* cpr.events.CMouseEvent */ e) {
					var vcStCal = app.lookup("cal1");
					var vcEdCal = app.lookup("cal2");
					var year = vcStCal.defaultDate.getFullYear();
					var month = vcStCal.defaultDate.getMonth() + 1;
					var maxDate = new Date(year, month, 0).getDate();
					
					if (month < 10) {
						month = '0' + month;
					}
					
					var start = year + "" + month + "" + '01';
					var end = year + "" + month + "" + maxDate;
					
					vcStCal.putValues([start, end]);
					vcEdCal.putValues([start, end]);
				}
	
				/*
				 * "전월" 버튼(btn4)에서 click 이벤트 발생 시 호출.
				 * 사용자가 컨트롤을 클릭할 때 발생하는 이벤트.
				 */
				function onBtn4Click( /* cpr.events.CMouseEvent */ e) {
					var vcStCal = app.lookup("cal1");
					var vcEdCal = app.lookup("cal2");
					var year = vcStCal.defaultDate.getFullYear();
					var month = vcStCal.defaultDate.getMonth();
					
					if (month == 0) {
						year = year - 1;
						month = 12;
					}
					
					var maxDate = new Date(year, month, 0).getDate();
					
					if (month < 10) {
						month = '0' + month;
					}
					
					var start = year + "" + month + "" + '01';
					var end = year + "" + month + "" + maxDate;
					vcStCal.putValues([start, end]);
					vcEdCal.putValues([start, end]);
				}
	
				/*
				 * "당분기" 버튼(btn5)에서 click 이벤트 발생 시 호출.
				 * 사용자가 컨트롤을 클릭할 때 발생하는 이벤트.
				 */
				function onBtn5Click( /* cpr.events.CMouseEvent */ e) {
					var cal1 = app.lookup("cal1");
					var cal2 = app.lookup("cal2");
					var defaultDate = cal1.defaultDate;
					var year = defaultDate.getFullYear();
					var month = defaultDate.getMonth() + 1;
					var startMonth;
					
					//분기 체크
					if (month % 3 == 0) {
						month = month - 2;
					} else if (month % 3 == 2) {
						startMonth = month - 1;
					}
					
					//month 2자리수로 만듬
					if (startMonth < 10) {
						startMonth = '0' + startMonth;
					}
					
					var endMonth = '0' + (month + 2);
					
					// month가 8월 이상일 경우 앞에 '0' 자름
					if (endMonth.length >= 3) {
						endMonth = endMonth.slice(1);
					}
					
					var maxDate = new Date(year, endMonth, 0).getDate();
					
					var start = year + '' + startMonth + '' + '01';
					var end = year + '' + endMonth + '' + maxDate;
					
					var navStart = year + '-' + startMonth + '-' + '01';
					
					cal1.putValues([start, end]);
					cal2.putValues([start, end]);
					cal1.navigate(new Date(navStart));
				}
	
				/*
				 * "전분기" 버튼(btn6)에서 click 이벤트 발생 시 호출.
				 * 사용자가 컨트롤을 클릭할 때 발생하는 이벤트.
				 */
				function onBtn6Click( /* cpr.events.CMouseEvent */ e) {
					var cal1 = app.lookup("cal1");
					var cal2 = app.lookup("cal2");
					
					var defaultDate = cal1.defaultDate;
					var year = defaultDate.getFullYear();
					var month = defaultDate.getMonth() - 2;
					var startMonth;
					
					//전 년도로 넘어갔을 경우
					if (month < 1) {
						year = year - 1;
						month = 12 + month;
					}
					
					//분기 체크
					if (month % 3 == 0) {
						startMonth = month - 2;
					} else if (month % 3 == 2) {
						startMonth = month - 1;
					} else {
						startMonth = month;
					}
					
					var endMonth = startMonth + 2;
					
					//month 2자리수로 만듬
					if (startMonth < 10) {
						startMonth = '0' + startMonth;
					}
					
					if (endMonth < 10) {
						var endMonth = '0' + endMonth;
					}
					
					var maxDate = new Date(year, endMonth, 0).getDate();
					
					var start = year + '' + startMonth + '' + '01'
					var end = year + '' + endMonth + '' + maxDate;
					
					var navStart = year + '-' + startMonth + '-' + '01';
					
					cal1.putValues([start, end]);
					cal2.putValues([start, end]);
					cal1.navigate(new Date(navStart));
				}
				/*
				 * "금년(전체)" 버튼(btn8)에서 click 이벤트 발생 시 호출.
				 * 사용자가 컨트롤을 클릭할 때 발생하는 이벤트.
				 */
				function onBtn8Click( /* cpr.events.CMouseEvent */ e) {
					var vcStCal = app.lookup("cal1");
					var vcEdCal = app.lookup("cal2");
					
					var year = vcStCal.defaultDate.getFullYear();
					var start = year + '0101';
					var end = year + '1231';
					vcStCal.putValues([start, end]);
					vcEdCal.putValues([start, end]);
					
					var navStart = year + '-01-01';
					vcStCal.navigate(new Date(navStart));
				}
	
				/*
				 * "전년(전체)" 버튼(btn10)에서 click 이벤트 발생 시 호출.
				 * 사용자가 컨트롤을 클릭할 때 발생하는 이벤트.
				 */
				function onBtn10Click( /* cpr.events.CMouseEvent */ e) {
					var vcStCal = app.lookup("cal1");
					var vcEdCal = app.lookup("cal2");
					
					var year = vcStCal.defaultDate.getFullYear() - 1;
					var start = year + '0101';
					var end = year + '1231';
					vcStCal.putValues([start, end]);
					vcEdCal.putValues([start, end]);
					
					var navStart = year + '-01-01';
					vcStCal.navigate(new Date(navStart));
				}
				// End - User Script
				
				// Header
				app.supportMedia("all and (min-width: 1024px)", "default");
				app.supportMedia("all and (min-width: 500px) and (max-width: 1023px)", "tablet");
				app.supportMedia("all and (max-width: 499px)", "mobile");
				
				// Configure root container
				var container = app.getContainer();
				container.style.css({
					"width" : "100%",
					"top" : "0px",
					"height" : "100%",
					"left" : "0px"
				});
				
				// Layout
				var formLayout_1 = new cpr.controls.layouts.FormLayout();
				formLayout_1.scrollable = false;
				formLayout_1.topMargin = "10px";
				formLayout_1.rightMargin = "10px";
				formLayout_1.bottomMargin = "10px";
				formLayout_1.leftMargin = "10px";
				formLayout_1.horizontalSpacing = "5px";
				formLayout_1.verticalSpacing = "5px";
				formLayout_1.setColumns(["1fr", "1fr", "1fr"]);
				formLayout_1.setColumnVisible(0, false);
				formLayout_1.setRows(["1fr", "30px", "30px"]);
				container.setLayout(formLayout_1);
				
				// UI Configuration
				var calendar_1 = new cpr.controls.Calendar("cal2");
				calendar_1.footerVisible = false;
				calendar_1.format = "YYYY-MM-DD";
				calendar_1.selectionType = "range";
				if(typeof onCal2BeforeValueChange == "function") {
					calendar_1.addEventListener("before-value-change", onCal2BeforeValueChange);
				}
				container.addChild(calendar_1, {
					"colIndex": 2,
					"rowIndex": 0
				});
				
				var calendar_2 = new cpr.controls.Calendar("cal1");
				calendar_2.footerVisible = false;
				calendar_2.format = "YYYY-MM-DD";
				calendar_2.selectionType = "range";
				if(typeof onCal1BeforeValueChange == "function") {
					calendar_2.addEventListener("before-value-change", onCal1BeforeValueChange);
				}
				if(typeof onCal1ValueChange == "function") {
					calendar_2.addEventListener("value-change", onCal1ValueChange);
				}
				container.addChild(calendar_2, {
					"colIndex": 1,
					"rowIndex": 0
				});
				
				var group_1 = new cpr.controls.Container("grp1");
				var flowLayout_1 = new cpr.controls.layouts.FlowLayout();
				flowLayout_1.scrollable = false;
				flowLayout_1.horizontalAlign = "right";
				group_1.setLayout(flowLayout_1);
				(function(container){
					var button_1 = new cpr.controls.Button("btnOK");
					button_1.value = "Apply";
					if(typeof onBtnOKClick == "function") {
						button_1.addEventListener("click", onBtnOKClick);
					}
					container.addChild(button_1, {
						"width": "100px",
						"height": "30px"
					});
					var button_2 = new cpr.controls.Button("btnCancel");
					button_2.value = "Cancel";
					if(typeof onBtnCancelClick == "function") {
						button_2.addEventListener("click", onBtnCancelClick);
					}
					container.addChild(button_2, {
						"width": "100px",
						"height": "30px"
					});
				})(group_1);
				container.addChild(group_1, {
					"colIndex": 2,
					"rowIndex": 2
				});
				
				var dateInput_1 = new cpr.controls.DateInput("dtiFromTime");
				dateInput_1.hideButton = true;
				dateInput_1.placeholder = "시:분:초";
				dateInput_1.mask = "HH:mm:ss";
				dateInput_1.format = "hh:mm:ss";
				if(typeof onDtiFromTimeValueChange == "function") {
					dateInput_1.addEventListener("value-change", onDtiFromTimeValueChange);
				}
				container.addChild(dateInput_1, {
					"colIndex": 1,
					"rowIndex": 1,
					"horizontalAlign": "center",
					"verticalAlign": "fill",
					"width": 150
				});
				
				var dateInput_2 = new cpr.controls.DateInput("dtiToTime");
				dateInput_2.hideButton = true;
				dateInput_2.placeholder = "시:분:초";
				dateInput_2.mask = "HH:mm:ss";
				dateInput_2.format = "hh:mm:ss";
				if(typeof onDtiToTimeValueChange == "function") {
					dateInput_2.addEventListener("value-change", onDtiToTimeValueChange);
				}
				container.addChild(dateInput_2, {
					"colIndex": 2,
					"rowIndex": 1,
					"horizontalAlign": "center",
					"verticalAlign": "fill",
					"width": 150
				});
				
				var group_2 = new cpr.controls.Container("grp2");
				var formLayout_2 = new cpr.controls.layouts.FormLayout();
				formLayout_2.scrollable = false;
				formLayout_2.topMargin = "5px";
				formLayout_2.rightMargin = "5px";
				formLayout_2.bottomMargin = "5px";
				formLayout_2.leftMargin = "5px";
				formLayout_2.horizontalSpacing = "10px";
				formLayout_2.verticalSpacing = "10px";
				formLayout_2.setColumns(["1fr", "1fr"]);
				formLayout_2.setRows(["35px", "1fr", "1fr", "1fr", "1fr"]);
				group_2.setLayout(formLayout_2);
				(function(container){
					var output_1 = new cpr.controls.Output();
					output_1.value = "자동선택";
					output_1.style.css({
						"background-color" : "#62b5e5",
						"color" : "#ffffff",
						"text-align" : "center"
					});
					container.addChild(output_1, {
						"colIndex": 0,
						"rowIndex": 0,
						"colSpan": 2,
						"rowSpan": 1
					});
					var button_3 = new cpr.controls.Button("btn1");
					button_3.value = "금주";
					if(typeof onBtn1Click == "function") {
						button_3.addEventListener("click", onBtn1Click);
					}
					container.addChild(button_3, {
						"colIndex": 0,
						"rowIndex": 1
					});
					var button_4 = new cpr.controls.Button("btn3");
					button_4.value = "당월";
					if(typeof onBtn3Click == "function") {
						button_4.addEventListener("click", onBtn3Click);
					}
					container.addChild(button_4, {
						"colIndex": 0,
						"rowIndex": 2
					});
					var button_5 = new cpr.controls.Button("btn5");
					button_5.value = "당분기";
					if(typeof onBtn5Click == "function") {
						button_5.addEventListener("click", onBtn5Click);
					}
					container.addChild(button_5, {
						"colIndex": 0,
						"rowIndex": 3
					});
					var button_6 = new cpr.controls.Button("btn2");
					button_6.value = "전주";
					if(typeof onBtn2Click == "function") {
						button_6.addEventListener("click", onBtn2Click);
					}
					container.addChild(button_6, {
						"colIndex": 1,
						"rowIndex": 1
					});
					var button_7 = new cpr.controls.Button("btn4");
					button_7.value = "전월";
					if(typeof onBtn4Click == "function") {
						button_7.addEventListener("click", onBtn4Click);
					}
					container.addChild(button_7, {
						"colIndex": 1,
						"rowIndex": 2
					});
					var button_8 = new cpr.controls.Button("btn6");
					button_8.value = "전분기";
					if(typeof onBtn6Click == "function") {
						button_8.addEventListener("click", onBtn6Click);
					}
					container.addChild(button_8, {
						"colIndex": 1,
						"rowIndex": 3
					});
					var button_9 = new cpr.controls.Button("btn8");
					button_9.value = "금년(전체)";
					if(typeof onBtn8Click == "function") {
						button_9.addEventListener("click", onBtn8Click);
					}
					container.addChild(button_9, {
						"colIndex": 0,
						"rowIndex": 4
					});
					var button_10 = new cpr.controls.Button("btn10");
					button_10.value = "전년(전체)";
					if(typeof onBtn10Click == "function") {
						button_10.addEventListener("click", onBtn10Click);
					}
					container.addChild(button_10, {
						"colIndex": 1,
						"rowIndex": 4
					});
				})(group_2);
				container.addChild(group_2, {
					"colIndex": 0,
					"rowIndex": 0
				});
				if(typeof onBodyLoad == "function"){
					app.addEventListener("load", onBodyLoad);
				}
				if(typeof onBodyInit == "function"){
					app.addEventListener("init", onBodyInit);
				}
			}
		});
	internalApp.title = "FromTo캘린더";
	
	// Type declaration for SelectDatePopup_POP
	cpr.utils.Util.ensurePackage("udc").SelectDatePopup_POP = function(id){
		cpr.controls.UDCBase.call(this, "udc.SelectDatePopup_POP", internalApp, id);
	};
	
	udc.SelectDatePopup_POP.prototype = Object.create(cpr.controls.UDCBase.prototype);
	Object.defineProperty(udc.SelectDatePopup_POP.prototype, "type", {
		get : function(){
			return "udc.SelectDatePopup_POP";
		},
		
		configurable: true
	});
	
	// App Properties
	
	// Register type into the Platform and package
	cpr.core.Platform.INSTANCE.register(internalApp);
})();
/// end - udc.SelectDatePopup_POP
/// start - udc.udcExamDuoDatePicker
/*
 * UDC Qualified Name: udc.udcExamDuoDatePicker
 * App URI: udc/udcExamDuoDatePicker
 * Source Location: udc/udcExamDuoDatePicker.clx
 *
 * This file was generated by eXBuilder6 compiler(1.0.4584), Don't edit manually.
 */
(function(){
	// App Declaration
		var internalApp = new cpr.core.App("udc/udcExamDuoDatePicker", { 
			onPrepare: function(loader) {
			},
			onCreate: function(/* cpr.core.AppInstance */ app, exports) {
				var linker = {};
				// Start - User Script
				/************************************************
				 * udcExamDuoDatePicker.js
				 * Created at 2021. 12. 10. 오전 8:51:15.
				 *
				 * @author HANS
				 ************************************************/
	
				/**
				 * 날짜 선택 다이얼로그 너비 크기
				 * @type {Number}
				 */
				var mnDpWidth = 600;
	
				/**
				 * 날짜 선택 다이얼로그 높이 크기
				 * @type {Number}
				 */
				var mnDpHeight = 360;
	
				/**
				 * 
				 * @param {String} psAppProp
				 */
				function getClassValid(psAppProp) {
					var result = "";
					if (psAppProp != "" && psAppProp != null) {
						psAppProp = psAppProp.trim();
						result = psAppProp;
					}
					return result;
				}
	
				exports.getClassValid = getClassValid;
	
				/**
				 * UDC 컨트롤이 그리드의 뷰 모드에서 표시할 텍스트를 반환합니다.
				 */
				exports.getText = function() {
					// TODO: 그리드의 뷰 모드에서 표시할 텍스트를 반환하는 하는 코드를 작성해야 합니다.
					return "";
				};
	
				exports.getValues = function() {
					var vsFromValue = app.getAppProperty("fromValue");
					var vsToValue = app.getAppProperty("toValue");
					var vsFormat = app.getAppProperty("format");
					var vsMask = app.getAppProperty("mask");
					var vsFromDate = "";
					var vsEndDate = "";
					if (vsFromValue != null && vsFromValue != "") {
						
						var voTempFrom = moment(vsFromValue, vsFormat);
						if (voTempFrom.isValid()) {
							vsFromDate = voTempFrom.format(vsMask);
						}
					}
					if (vsToValue != null && vsToValue != "") {
						
						var voTempEnd = moment(vsToValue, vsFormat);
						if (voTempEnd.isValid()) {
							vsEndDate = voTempEnd.format(vsMask);
						}
					}
					
					return [vsFromDate, vsEndDate];
				}
	
				/**
				 * 현재 최상위 앱과 겹치는 영역이 있는지 확인하고,
				 * 다이얼로그가 열릴 위치를 반환합니다.
				 * @param {{width:Number,height:Number,top:Number,left:Number}} poDpConstraint
				 * @param {cpr.geometry.Rectangle} poHostRect
				 * @return {cpr.controls.layouts.Constraint}
				 */
				function getBoundingClientRect(poDpConstraint, poHostRect) {
					var voRootAppIns = app.getRootAppInstance();
					var vcRootCont = voRootAppIns.getContainer();
					var voRootActlRect = vcRootCont.getActualRect();
					
					var voDpHostRect = poHostRect;
					var voDpConstraint = poDpConstraint;
					
					var voNewConstraint = {
						width: voDpConstraint.width,
						height: voDpConstraint.height
					};
					
					var vnIntrsctH = voDpConstraint.top + voDpConstraint.height;
					var vnIntrsctW = voDpConstraint.left + voDpConstraint.width;
					
					if (voRootActlRect.height < vnIntrsctH) { // 높이가 벗어나는 경우
						voNewConstraint["top"] = voDpConstraint.top - voDpConstraint.height - voDpHostRect.height;
					} else {
						voNewConstraint["top"] = voDpConstraint.top;
					}
					
					if (voRootActlRect.width < vnIntrsctW) {
						voNewConstraint["right"] = voRootActlRect.width - voDpHostRect.right;
					} else {
						voNewConstraint["left"] = voDpConstraint.left;
					}
					
					return voNewConstraint;
				}
	
				/*
				 * 데이트 인풋에서 click 이벤트 발생 시 호출.
				 * 사용자가 컨트롤을 클릭할 때 발생하는 이벤트.
				 */
				function onDtiClick( /* cpr.events.CMouseEvent */ e) {
					/** 
					 * @type cpr.controls.DateInput
					 */
					var dtiFrom = e.control;
					
					var vnReadOnly = app.getHost().readOnly;
					if (vnReadOnly || e.target.getAttribute("class") == 'cl-dateinput-clear') {
						return;
					}
					var voHostRect = app.getHost().getActualRect(); // 현 UDC의 Rect
					var voDpProp = { // 다이얼로그 프롭
						width: mnDpWidth,
						height: mnDpHeight,
						top: voHostRect.bottom,
						left: voHostRect.left
					}
					
					/* 다이얼로그가 열릴 위치를 계산하여 적절한 다이얼로그를 엽니다. */
					var voReplaceConstraint = getBoundingClientRect(voDpProp, voHostRect);
					
					app.getRootAppInstance().dialogManager.openDialog("app/cmn/udc/SelectDatePopup_POP", "DuoCalendar", voReplaceConstraint, function(dialog) {
						dialog.headerVisible = false; // 다이얼로그 헤더 visible
						dialog.resizable = false; // 다이얼로그 resize
						dialog.style.overlay.css("background-color", "transparent");
						dialog.style.setClasses("datepicker-modal");
						dialog.initValue = {
							selectOption: app.getAppProperty("selectOption")
						}
						dialog.ready(function(dialogApp) {
							//TODO 앱의 초기값을 설정하십시오.
							dialogApp.initValue = {
								fromDate: app.getAppProperty("fromValue"),
								toDate: app.getAppProperty("toValue"),
								format: app.getAppProperty("format"),
								enableDateExp: app.getAppProperty("enabledDateExp"),
								className: getClassValid(app.getAppProperty("calendarClass")),
								useTimeFormat: app.getAppProperty("useTimeFormat"),
								useAutoSelect: app.getAppProperty("useAutoSelect")
							}
							var voOpenEv = new cpr.events.CUIEvent("open");
							app.dispatchEvent(voOpenEv);
						});
						
						/* 오버레이 클릭 시 다이얼로그가 닫히며 값이 설정되도록 함 */
						dialog.addEventListener("overlay-click", function(e) {
							dialog.close();
						});
						
						/* ESC키를 누를 때 데이트피커 다이얼로그가 닫히도록 함 */
						dialog.addEventListener("keydown", function(e) {
							if (e.keyCode == cpr.events.KeyCode.ESC) {
								e.control.close();
							}
						});
						
						/* 다이얼로그가 닫혔을 때 발생하는 이벤트 정의 */
						dialog.addEventListener("close", function(e) {
							var dialog = e.control;
							
							var voCloseEv = new cpr.events.CUIEvent("close");
							app.dispatchEvent(voCloseEv);
							
							var vsRtrnVal = dialog.returnValue; // 반환 값
							if (vsRtrnVal) {
								
								var vsFromValue = app.getAppProperty("fromValue");
								var vsToValue = app.getAppProperty("toValue");
								
								var vaOldValue = [vsFromValue, vsToValue];
								var vsOldValue = vaOldValue.join(",");
								vsOldValue == "," ? null : vsOldValue;
								/** @type String[] */
								var vaNewValue = vsRtrnVal;
								var voBVCEvt = new cpr.events.CValueChangeEvent("before-value-change", {
									oldValue: vsOldValue,
									newValue: vaNewValue.join(",")
								});
								var vbIsPrevented = app.dispatchEvent(voBVCEvt);
								
								if (!voBVCEvt.defaultPrevented) {
									
									app.setAppProperty("fromValue", vsRtrnVal[0]);
									app.setAppProperty("toValue", vsRtrnVal[1]);
									
									var voVCEvt = new cpr.events.CValueChangeEvent("value-change", {
										oldValue: vsOldValue,
										newValue: vaNewValue.join(",")
									});
									app.dispatchEvent(voVCEvt);
								}
								
								app.lookup("dtiFrom").redraw();
								app.lookup("dtiTo").redraw();
							}
						});
					});
				}
	
				/*
				 * "X" 버튼(btnClear)에서 click 이벤트 발생 시 호출.
				 * 사용자가 컨트롤을 클릭할 때 발생하는 이벤트.
				 */
				function onBtnClearClick( /* cpr.events.CMouseEvent */ e) {
					/** 
					 * @type cpr.controls.Button
					 */
					var btnClear = e.control;
					app.lookup("dtiFrom").clear();
					app.lookup("dtiTo").clear();
					
					var voClearEvt = new cpr.events.CUIEvent("clear");
					app.dispatchEvent(voClearEvt);
				}
	
				function changeType() {
					
					var vsSelectType = app.getAppProperty("selectOption");
					
					switch (vsSelectType) {
						case "date": //과년도 동일일
							break;
						case "day":
							break;
						case "dayofweek":
							break;
						case "month":
							break;
						default:
							break;
					}
				}
				/*
				 * 루트 컨테이너에서 load 이벤트 발생 시 호출.
				 * 앱이 최초 구성된후 최초 랜더링 직후에 발생하는 이벤트 입니다.
				 */
				function onBodyLoad( /* cpr.events.CEvent */ e) {
					
				}
	
				/*
				 * 데이트 인풋에서 clear 이벤트 발생 시 호출.
				 * 인풋박스에서 esc키 또는 클리어버튼을 클릭하여 인풋의 값이 Clear될때 발생하는 이벤트
				 */
				function onDtiToClear( /* cpr.events.CUIEvent */ e) {
					/** 
					 * @type cpr.controls.DateInput
					 */
					var dtiTo = e.control;
					
					app.lookup("dtiFrom").clear();
				}
				// End - User Script
				
				// Header
				app.declareAppProperty("format", "YYYYMMDD");
				app.declareAppProperty("mask", "YYYY-MM-DD");
				app.declareAppProperty("enabledDateExp", null);
				app.declareBindableAppProperty("fromValue", null);
				app.declareBindableAppProperty("toValue", null);
				app.declareAppProperty("dateInputClass", null);
				app.declareAppProperty("calendarClass", null);
				app.declareAppProperty("useTimeFormat", false);
				app.declareAppProperty("selectOption", "date");
				app.declareAppProperty("useAutoSelect", false);
				app.supportMedia("all and (min-width: 1024px)", "default");
				app.supportMedia("all and (min-width: 500px) and (max-width: 1023px)", "tablet");
				app.supportMedia("all and (max-width: 499px)", "mobile");
				
				// Configure root container
				var container = app.getContainer();
				container.style.setClasses(["datepickers"]);
				container.style.css({
					"width" : "100%",
					"top" : "0px",
					"height" : "100%",
					"left" : "0px"
				});
				
				// Layout
				var formLayout_1 = new cpr.controls.layouts.FormLayout();
				formLayout_1.scrollable = false;
				formLayout_1.horizontalSpacing = "0px";
				formLayout_1.verticalSpacing = "0px";
				formLayout_1.setColumns(["1fr", "20px", "1fr", "30px"]);
				formLayout_1.setColumnVisible(3, false);
				formLayout_1.setRows(["1fr"]);
				container.setLayout(formLayout_1);
				
				// UI Configuration
				var dateInput_1 = new cpr.controls.DateInput("dtiFrom");
				dateInput_1.hideButton = true;
				dateInput_1.placeholder = "시작일";
				dateInput_1.bind("value").toAppProperty("fromValue");
				dateInput_1.bind("format").toAppProperty("format");
				dateInput_1.bind("mask").toAppProperty("mask");
				dateInput_1.style.bindClass().toExpression("@getClassValid(@dateInputClass) != \"\" ? @dateInputClass : \"datepicker\"");
				if(typeof onDtiClick == "function") {
					dateInput_1.addEventListener("click", onDtiClick);
				}
				container.addChild(dateInput_1, {
					"colIndex": 0,
					"rowIndex": 0
				});
				
				var dateInput_2 = new cpr.controls.DateInput("dtiTo");
				dateInput_2.hideButton = true;
				dateInput_2.placeholder = "종료일";
				dateInput_2.showClearButton = true;
				dateInput_2.bind("value").toAppProperty("toValue");
				dateInput_2.bind("format").toAppProperty("format");
				dateInput_2.bind("mask").toAppProperty("mask");
				dateInput_2.style.bindClass().toExpression("@getClassValid(@dateInputClass) != \"\" ? @dateInputClass : \"datepicker\"");
				if(typeof onDtiClick == "function") {
					dateInput_2.addEventListener("click", onDtiClick);
				}
				if(typeof onDtiToClear == "function") {
					dateInput_2.addEventListener("clear", onDtiToClear);
				}
				container.addChild(dateInput_2, {
					"colIndex": 2,
					"rowIndex": 0
				});
				
				var button_1 = new cpr.controls.Button("btnClear");
				button_1.value = "X";
				button_1.style.setClasses(["btn-p-0"]);
				if(typeof onBtnClearClick == "function") {
					button_1.addEventListener("click", onBtnClearClick);
				}
				container.addChild(button_1, {
					"colIndex": 3,
					"rowIndex": 0
				});
				
				var output_1 = new cpr.controls.Output("opt1");
				output_1.tabIndex = 0;
				output_1.value = "-";
				output_1.style.setClasses(["text-center"]);
				output_1.style.css({
					"text-align" : "center"
				});
				container.addChild(output_1, {
					"colIndex": 1,
					"rowIndex": 0
				});
				if(typeof onBodyLoad == "function"){
					app.addEventListener("load", onBodyLoad);
				}
			}
		});
	internalApp.title = "FromTo피커";
	
	// Type declaration for udcExamDuoDatePicker
	cpr.utils.Util.ensurePackage("udc").udcExamDuoDatePicker = function(id){
		cpr.controls.UDCBase.call(this, "udc.udcExamDuoDatePicker", internalApp, id);
	};
	
	udc.udcExamDuoDatePicker.prototype = Object.create(cpr.controls.UDCBase.prototype);
	Object.defineProperty(udc.udcExamDuoDatePicker.prototype, "type", {
		get : function(){
			return "udc.udcExamDuoDatePicker";
		},
		
		configurable: true
	});
	
	// App Properties
	Object.defineProperty(udc.udcExamDuoDatePicker.prototype, "format", {
		get: function(){
			return this.getEmbeddedAppInstance().getAppProperty("format");
		},
		set: function(newValue){
			return this.getEmbeddedAppInstance().setAppProperty("format", newValue, true);
		}
	});
	Object.defineProperty(udc.udcExamDuoDatePicker.prototype, "mask", {
		get: function(){
			return this.getEmbeddedAppInstance().getAppProperty("mask");
		},
		set: function(newValue){
			return this.getEmbeddedAppInstance().setAppProperty("mask", newValue, true);
		}
	});
	Object.defineProperty(udc.udcExamDuoDatePicker.prototype, "enabledDateExp", {
		get: function(){
			return this.getEmbeddedAppInstance().getAppProperty("enabledDateExp");
		},
		set: function(newValue){
			return this.getEmbeddedAppInstance().setAppProperty("enabledDateExp", newValue, true);
		}
	});
	Object.defineProperty(udc.udcExamDuoDatePicker.prototype, "fromValue", {
		get: function(){
			return this.getEmbeddedAppInstance().getAppProperty("fromValue");
		},
		set: function(newValue){
			return this.getEmbeddedAppInstance().setAppProperty("fromValue", newValue, true);
		}
	});
	Object.defineProperty(udc.udcExamDuoDatePicker.prototype, "toValue", {
		get: function(){
			return this.getEmbeddedAppInstance().getAppProperty("toValue");
		},
		set: function(newValue){
			return this.getEmbeddedAppInstance().setAppProperty("toValue", newValue, true);
		}
	});
	Object.defineProperty(udc.udcExamDuoDatePicker.prototype, "dateInputClass", {
		get: function(){
			return this.getEmbeddedAppInstance().getAppProperty("dateInputClass");
		},
		set: function(newValue){
			return this.getEmbeddedAppInstance().setAppProperty("dateInputClass", newValue, true);
		}
	});
	Object.defineProperty(udc.udcExamDuoDatePicker.prototype, "calendarClass", {
		get: function(){
			return this.getEmbeddedAppInstance().getAppProperty("calendarClass");
		},
		set: function(newValue){
			return this.getEmbeddedAppInstance().setAppProperty("calendarClass", newValue, true);
		}
	});
	Object.defineProperty(udc.udcExamDuoDatePicker.prototype, "useTimeFormat", {
		get: function(){
			return this.getEmbeddedAppInstance().getAppProperty("useTimeFormat");
		},
		set: function(newValue){
			return this.getEmbeddedAppInstance().setAppProperty("useTimeFormat", newValue, true);
		}
	});
	Object.defineProperty(udc.udcExamDuoDatePicker.prototype, "selectOption", {
		get: function(){
			return this.getEmbeddedAppInstance().getAppProperty("selectOption");
		},
		set: function(newValue){
			return this.getEmbeddedAppInstance().setAppProperty("selectOption", newValue, true);
		}
	});
	Object.defineProperty(udc.udcExamDuoDatePicker.prototype, "useAutoSelect", {
		get: function(){
			return this.getEmbeddedAppInstance().getAppProperty("useAutoSelect");
		},
		set: function(newValue){
			return this.getEmbeddedAppInstance().setAppProperty("useAutoSelect", newValue, true);
		}
	});
	
	// Register type into the Platform and package
	cpr.core.Platform.INSTANCE.register(internalApp);
})();
/// end - udc.udcExamDuoDatePicker
