/*
 * App URI: detailBoard
 * Source Location: detailBoard.clx
 *
 * This file was generated by eXBuilder6 compiler(1.0.4640), Don't edit manually.
 */
(function() {
	var app = new cpr.core.App("detailBoard", { 
		onPrepare: function(loader) {
		},
		onCreate: function(/* cpr.core.AppInstance */ app, exports) {
			var linker = {};
			// Start - User Script
			/************************************************
			 * detailBoard.js
			 * Created at 2023. 8. 8. 오전 10:04:40.
			 *
			 * @author USER
			 ************************************************/
			/*
			 * 루트 컨테이너에서 init 이벤트 발생 시 호출.
			 * 앱이 최초 구성될 때 발생하는 이벤트 입니다.
			 */
			function onBodyInit(e) {
				
				var step;
				for (step = 0; step < 3; step++) {
					console.log("Walking east one step");
				}
				
			}
			/*
			 * 루트 컨테이너에서 load 이벤트 발생 시 호출.
			 * 앱이 최초 구성된후 최초 랜더링 직후에 발생하는 이벤트 입니다.
			 */
			function onBodyLoad2(e) {
				
				var selectsms = app.lookup("selectsms");
				var selectCommentsms = app.lookup("selectCommentsms");
				
				var eduApplyBoardMap = app.lookup("eduApplyBoardMap");
				var commentBoardMap = app.lookup("commentBoardMap");
				var commentListSet = app.lookup("commentListSet");
				
				var host = app.getHost();
				var initValue = host.initValue;
				//컨트롤러로 boardNo 값 보내기
				eduApplyBoardMap.setValue("EDU_BOARD_NO", initValue);
				console.log("eduApplyBoardMap setValue : " + eduApplyBoardMap.getValue("EDU_BOARD_NO"));
				commentBoardMap.setValue("EDU_BOARD_NO", initValue);
				console.log("commentBoardMap setValue : " + commentBoardMap.getValue("EDU_BOARD_NO"));
				selectCommentsms.send();
				selectsms.send();
				//selectCommentsms.send();
				//	var eduApplyBoardMemeberCountMap = app.lookup("eduApplyBoardMemeberCountMap");
				//	eduApplyBoardMemeberCountMap.setValue("MEMBER_COUNT_ID", value);
				//	eduApplyBoardMemeberCountMap.setValue("USER_ID", value);
				//	eduApplyBoardMemeberCountMap.setValue("EDU_BOARD_NO", value);
				
				//	var host = app.getHost();
				//	host.initValue.value;
				//	//컨트롤러로 boardNo 값 보내기
			}
			/*
			 * 서브미션에서 submit-success 이벤트 발생 시 호출.
			 * 통신이 성공하면 발생합니다.
			 */
			function onSelectsmsSubmitSuccess(e) {
				var selectsms = e.control;
				
				//board
				var title = app.lookup("title");
				var category = app.lookup("category");
				var memberCount = app.lookup("memberCount");
				var content = app.lookup("content");
				var udccomduodatepicker1 = app.lookup("udccomduodatepicker1");
				var udccomduodatepicker2 = app.lookup("udccomduodatepicker2");
				var address = app.lookup("address");
				var userId = app.lookup("userId");
				
				var eduApplyBoardMap = app.lookup("eduApplyBoardMap");
				
				eduApplyBoardMap.setValue("EDU_BOARD_TITLE", title.value);
				eduApplyBoardMap.setValue("EDU_BOARD_CATEGORY", category.value);
				eduApplyBoardMap.setValue("EDU_BOARD_MAX_MEMBER_COUNT", memberCount.value);
				eduApplyBoardMap.setValue("EDU_BOARD_CONTENT", content.value);
				eduApplyBoardMap.setValue("EDU_BOARD_START_PERIOD", udccomduodatepicker1.fromValue);
				eduApplyBoardMap.setValue("EDU_BOARD_END_PERIOD", udccomduodatepicker1.toValue);
				eduApplyBoardMap.setValue("EDU_BOARD_APPLY_START_PERIOD", udccomduodatepicker2.fromValue);
				eduApplyBoardMap.setValue("EDU_BOARD_APPLY_END_PERIOD", udccomduodatepicker2.toValue);
				eduApplyBoardMap.setValue("EDU_BOARD_ADDRESS", address.value);
				
				app.lookup("title").redraw();
				app.lookup("category").redraw();
				app.lookup("memberCount").redraw();
				app.lookup("content").redraw();
				app.lookup("udccomduodatepicker1").redraw();
				app.lookup("udccomduodatepicker2").redraw();
				app.lookup("address").redraw();
				
				//	var commentContent = app.lookup("commentContent");
				//	
				//	commentBoardMap.setValue("EDU_APPLY_COMMENT_CONTENT", commentContent.value);
				//	commentBoardMap.setValue("USER_ID", userId.value);
				//	
				//	app.lookup("userId").redraw();
				//	app.lookup("commentContent").redraw();
				//	
			}
			/*
			 * 서브미션에서 submit-success 이벤트 발생 시 호출.
			 * 통신이 성공하면 발생합니다.
			 */
			function onSelectCommentsmsSubmitSuccess(e) {
				var selectCommentsms = e.control;
				app.lookup("userId").redraw();
				var grid = app.lookup("grd1");
				var grdDelete = app.lookup("grdDelete");
				var eduApplyBoardMap = app.lookup("eduApplyBoardMap");
				var userIdValue = app.lookup("userId");
				//commentSet
				var commentListSet = app.lookup("commentListSet");
				
				//commentMap
				var commentBoardMap = app.lookup("commentBoardMap");
					for (var i = 1; i < grid.rowCount; i++) {
					console.log(grid.getCellValue(i, "USER_ID"));
					if (grid.getCellValue(i, "USER_ID") == userIdValue.value) {
						grdDelete.visible = true
						grid.redraw();
					}
				}
			}
			/*
			 * "수정" 버튼에서 click 이벤트 발생 시 호출.
			 * 사용자가 컨트롤을 클릭할 때 발생하는 이벤트.
			 */

			function onButtonClick(e) {
				var button = e.control;
				var submission = app.lookup("updatesms");
				
				var dataMap = app.lookup("eduApplyBoardMap");
				var udcExamDuoDatePicker = app.lookup("udccomduodatepicker1");
				dataMap.setValue("EDU_BOARD_START_PERIOD", udcExamDuoDatePicker.fromValue);
				dataMap.setValue("EDU_BOARD_END_PERIOD", udcExamDuoDatePicker.toValue);
				var udcExamDuoDatePicker2 = app.lookup("udccomduodatepicker2");
				dataMap.setValue("EDU_BOARD_APPLY_START_PERIOD", udcExamDuoDatePicker2.fromValue);
				dataMap.setValue("EDU_BOARD_APPLY_END_PERIOD", udcExamDuoDatePicker2.toValue);
				var addressinputBox = app.lookup("address");
				//	var detailAdressinputBox = app.lookup("detailAdress");
				//	
				//	if (detailAdressinputBox.value != null) {
				//		dataMap.setValue("EDU_BOARD_ADDRESS", addressinputBox.value + "-" + detailAdressinputBox.value);
				//	}
				submission.send()
				window.location.href = "updateBoard.clx";
			}

			/*
			 * "주소찾기" 버튼에서 click 이벤트 발생 시 호출.
			 * 사용자가 컨트롤을 클릭할 때 발생하는 이벤트.
			 */
			function onButtonClick3(e) {
				var button = e.control;
				cpr.core.ResourceLoader.loadScript("//t1.daumcdn.net/mapjsapi/bundle/postcode/prod/postcode.v2.js")
					.then(function(input) {
						new daum.Postcode({
							oncomplete: function(data) {
								// 팝업에서 검색결과 항목을 클릭했을때 실행할 코드를 작성하는 부분입니다.
								// 예제를 참고하여 다양한 활용법을 확인해 보세요.
								var inputBox = app.lookup("address");
								//var inputBox2 = app.lookup("PostCode");
								var addr = "";
								console.log(addr);
								//사용자가 선택한 주소 타입에 따라 해당 주소 값을 가져온다.
								if (data.userSelectedType === 'R') { // 사용자가 도로명 주소를 선택했을 경우
									addr = data.roadAddress;
									inputBox.value = data.zonecode + "-" + addr;
								} else { // 사용자가 지번 주소를 선택했을 경우(J)
									addr = data.jibunAddress;
									inputBox.value = data.zonecode + "-" + addr;
								}
								//inputBox2.value = data.zonecode;
							}
						}).open();
					});
			}

			/*
			 * "삭제" 버튼에서 click 이벤트 발생 시 호출.
			 * 사용자가 컨트롤을 클릭할 때 발생하는 이벤트.
			 */
			function onButtonClick2(e) {
				var button = e.control;
				var button = e.control;
				var submission = app.lookup("deletesms");
				submission.send()
				window.location.href = "toBoardList.do";
			}

			/*
			 * "기존 값" 버튼에서 click 이벤트 발생 시 호출.
			 * 사용자가 컨트롤을 클릭할 때 발생하는 이벤트.
			 */
			function onButtonClick4(e) {
				var button = e.control;
				var submission = app.lookup("selectsms");
				var dataMap = app.lookup("eduApplyBoardMap");
				
				app.lookup("title").redraw();
				app.lookup("category").redraw();
				app.lookup("memberCount").redraw();
				app.lookup("content").redraw();
				app.lookup("udccomduodatepicker1").redraw();
				app.lookup("udccomduodatepicker2").redraw();
				app.lookup("address").redraw();
				submission.send()
				
			}

			/*
			 * "기존 값" 버튼에서 click 이벤트 발생 시 호출.
			 * 사용자가 컨트롤을 클릭할 때 발생하는 이벤트.
			 */
			function onButtonClick5(e) {
				var button = e.control;
				var submission = app.lookup("selectCommentsms");
				var dataMap = app.lookup("commentBoardMap");
				
				app.lookup("userId").redraw();
				app.lookup("commentContent").redraw();
				
				submission.send()
			}

			/*
			 * "댓글 수정" 버튼에서 click 이벤트 발생 시 호출.
			 * 사용자가 컨트롤을 클릭할 때 발생하는 이벤트.
			 */
			function onButtonClick6(e) {
				var button = e.control;
				var submission = app.lookup("updateCommentsms");
				var dataMap = app.lookup("commentBoardMap");
				
				submission.send()
			}

			/*
			 * "목록" 버튼에서 click 이벤트 발생 시 호출.
			 * 사용자가 컨트롤을 클릭할 때 발생하는 이벤트.
			 */
			function onButtonClick7(e) {
				var button = e.control;
				window.location.href = "toBoardList.do";
			}
			//
			///*
			// * "참여하기" 버튼에서 click 이벤트 발생 시 호출.
			// * 사용자가 컨트롤을 클릭할 때 발생하는 이벤트.
			// */
			//function onButtonClick8(e){
			//	var button = e.control;
			//	var submission = app.lookup("selectMemberCount");
			//	var eduApplyBoardMemeberCountMap = app.lookup("eduApplyBoardMemeberCountMap");
			//	submission.send();
			//	
			//	
			//	var value = eduApplyBoardMemeberCountMap.getValue("TOTAL_COUNT");
			//	var value2 = eduApplyBoardMemeberCountMap.getValue("EDU_BOARD_MAX_MEMBER_COUNT");
			//	if(value==value2){
			//		var eduApplyBoardMap = app.lookup("eduApplyBoardMap");
			//		eduApplyBoardMap.setValue("EDU_BOARD_STATUS", "모집마감");
			//		var submission2 = app.lookup("updateMemberCount");
			//		submission2.send();
			//	}
			//}

			/*
			 * "Button" 버튼에서 click 이벤트 발생 시 호출.
			 * 사용자가 컨트롤을 클릭할 때 발생하는 이벤트.
			 */
			function onButtonClick9(e) {
				var button = e.control;
				//수정
				var updateCommentsms = app.lookup("updateCommentsms");
				updateCommentsms.send();
				var grid1 = app.lookup("grd1");
				grid1.redraw();
			}

			/*
			 * "Button" 버튼에서 click 이벤트 발생 시 호출.
			 * 사용자가 컨트롤을 클릭할 때 발생하는 이벤트.
			 */
			function onButtonClick10(e) {
				var button = e.control;
				//삭제
				var deleteCommentsms = app.lookup("deleteCommentsms");
				deleteCommentsms.send();
			}

			/*
			 * "Button" 버튼에서 click 이벤트 발생 시 호출.
			 * 사용자가 컨트롤을 클릭할 때 발생하는 이벤트.
			 */
			function onButtonClick11(e) {
				var button = e.control;
				var selectCommentsms = app.lookup("selectCommentsms");
				selectCommentsms.send();
				
				var grid = app.lookup("grd1");
				grid.redraw();
				
			}

			/*
			 * "댓글쓰기" 버튼에서 click 이벤트 발생 시 호출.
			 * 사용자가 컨트롤을 클릭할 때 발생하는 이벤트.
			 */
			function onButtonClick12(e) {
				var button = e.control;
				var createCommentsms = app.lookup("createCommentsms");
				var selectCommentsms = app.lookup("selectCommentsms");
				var eduApplyBoardMap = app.lookup("eduApplyBoardMap");
				var commentBoardMap = app.lookup("commentBoardMap");
				var userId = app.lookup("userId");
				var commentContent = app.lookup("commentContent");
				commentBoardMap.setValue("USER_ID", userId.value);
				commentBoardMap.setValue("EDU_APPLY_COMMENT_CONTENT", commentContent.value);
				commentBoardMap.setValue("EDU_BOARD_NO", eduApplyBoardMap.getValue("EDU_BOARD_NO"));
				console.log("commentBoardMapsetValue : " + commentBoardMap.getValue("EDU_BOARD_NO"));
				
				console.log("eduApplyBoardMap : " + eduApplyBoardMap.getValue("EDU_BOARD_NO"));
				
				createCommentsms.send();
				var userIdMap = commentBoardMap.getValue("USER_ID");
				var userIdValue = app.lookup("userId");
				console.log("userIdValue : " + userIdValue.value);
				
				var eduApplyBoardMap = app.lookup("eduApplyBoardMap");
				var grid = app.lookup("grd1");
				console.log("rows" + grid.rowCount);
				//console.log(grid.getCellValue(i, "USER_ID"));
				if (createCommentsms.isSuccess()) {
					commentBoardMap.setValue("EDU_BOARD_NO", eduApplyBoardMap.getValue("EDU_BOARD_NO"));
					selectCommentsms.send();
					grid.redraw();
				}
				grid.redraw();
			}

			/*
			 * "수정버튼" 버튼에서 click 이벤트 발생 시 호출.
			 * 사용자가 컨트롤을 클릭할 때 발생하는 이벤트.
			 */
			function onButtonClick13(e) {
				var button = e.control;
				
			}

			/*
			 * "삭제" 버튼에서 click 이벤트 발생 시 호출.
			 * 사용자가 컨트롤을 클릭할 때 발생하는 이벤트.
			 */
			function onButtonClick14(e) {
				var button = e.control;
				var button2 = app.lookup("grdDelete");
				var deleteCommentsms = app.lookup("deleteCommentsms");
				var commentBoardMap = app.lookup("commentBoardMap");
				var selectCommentsms = app.lookup("selectCommentsms");
				var eduApplyBoardMap = app.lookup("eduApplyBoardMap");
				
				deleteCommentsms.send();
				var grid = app.lookup("grd1");
				if (deleteCommentsms.isSuccess()) {
					commentBoardMap.setValue("EDU_BOARD_NO", eduApplyBoardMap.getValue("EDU_BOARD_NO"));
					selectCommentsms.send();
					grid.redraw();
				}
				grid.redraw();
			}

			//var host = app.getHost();
			//	var hostAppInstance = host.getAppInstance();
			//	var grid = app.lookup("grd1");
			//	grid.addEventListener("cell-click", function(e){
			//		var vcEmb = hostAppInstance.lookup("ea1");
			//		var vsAppId = "detailBoard";
			//		if(vsAppId == null) {
			//		return alert("추가될 App이 존재하지 않습니다.");
			//	}
			//		cpr.core.App.load(vsAppId, function(/*cpr.core.App*/ loadedApp){
			//		/*임베디드앱에 안에 앱이 있는 경우에는 앱을 삭제해줍니다.(다시 앱을 열고싶을때 스크립트 작성)*/
			//		if(vcEmb.getEmbeddedAppInstance()){
			//			vcEmb.getEmbeddedAppInstance().dispose();
			//		}
			//		/*로드된 앱이 있는 경우에는 임베디드앱 안에 불러온 앱을 넣습니다.*/
			//		if(loadedApp){						
			//			/*초기값을 전달합니다.*/			
			//			vcEmb.ready(function(/*cpr.controls.EmbeddedApp*/embApp){
			//			embApp.initValue =e.row.getRowData().EDU_BOARD_NO;
			//			})
			//			/*임베디드 앱에 내장할 앱을 로드하여 설정합니다*/
			//			vcEmb.app = loadedApp;
			//			var app1 = vcEmb.app;
			//			app1.getInstances()
			//		}
			//	}); 
			//	});
			//	
			//	var listBox = app.lookup("lbx1");
			//	var comboBox = app.lookup("cmb1");
			//	listBox.selectItemByValue("value1");
			//	comboBox.selectItemByValue("value1");
			// End - User Script
			
			// Header
			var dataSet_1 = new cpr.data.DataSet("boardList");
			dataSet_1.parseData({
				"columns" : [
					{
						"name": "EDU_BOARD_NO",
						"dataType": "number"
					},
					{"name": "EDU_BOARD_TITLE"},
					{"name": "EDU_BOARD_START_PERIOD"},
					{"name": "EDU_BOARD_END_PERIOD"},
					{"name": "EDU_BOARD_APPLY_START_PERIOD"},
					{"name": "EDU_BOARD_APPLY_END_PERIOD"},
					{
						"name": "EDU_BOARD_MEMBER_COUNT",
						"dataType": "number"
					},
					{"name": "EDU_BOARD_STATUS"},
					{"name": "EDU_BOARD_ADDRESS"},
					{"name": "EDU_BOARD_CATEGORY"},
					{"name": "EDU_BOARD_CONTENT"}
				]
			});
			app.register(dataSet_1);
			
			var dataSet_2 = new cpr.data.DataSet("commentListSet");
			dataSet_2.parseData({
				"columns": [
					{"name": "EDU_APPLY_COMMENT_CONTENT"},
					{"name": "EDU_BOARD_NO"},
					{"name": "USER_ID"}
				],
				"rows": [{"EDU_APPLY_COMMENT_CONTENT": "EDU_APPLY_COMMENT_CONTENT1", "EDU_BOARD_NO": "EDU_BOARD_NO1", "USER_ID": "USER_ID1"}]
			});
			app.register(dataSet_2);
			var dataMap_1 = new cpr.data.DataMap("eduApplyBoardMap");
			dataMap_1.parseData({
				"columns" : [
					{
						"name": "EDU_BOARD_TITLE",
						"dataType": "string"
					},
					{"name": "EDU_BOARD_START_PERIOD"},
					{
						"name": "EDU_BOARD_END_PERIOD",
						"dataType": "string"
					},
					{
						"name": "EDU_BOARD_APPLY_START_PERIOD",
						"dataType": "string"
					},
					{"name": "EDU_BOARD_APPLY_END_PERIOD"},
					{
						"name": "EDU_BOARD_MAX_MEMBER_COUNT",
						"dataType": "string"
					},
					{"name": "EDU_BOARD_ADDRESS"},
					{"name": "EDU_BOARD_CATEGORY"},
					{"name": "EDU_BOARD_CONTENT"},
					{
						"name": "USER_ID",
						"defaultValue": ""
					},
					{"name": "EDU_BOARD_NO"},
					{"name": "EDU_BOARD_STATUS"}
				]
			});
			app.register(dataMap_1);
			
			var dataMap_2 = new cpr.data.DataMap("commentBoardMap");
			dataMap_2.parseData({
				"columns" : [
					{
						"name": "EDU_APPLY_COMMENT_CONTENT",
						"dataType": "string",
						"defaultValue": ""
					},
					{
						"name": "EDU_BOARD_NO",
						"dataType": "string",
						"defaultValue": ""
					},
					{
						"name": "USER_ID",
						"dataType": "string",
						"defaultValue": ""
					}
				]
			});
			app.register(dataMap_2);
			
			var dataMap_3 = new cpr.data.DataMap("eduApplyBoardMemeberCountMap");
			dataMap_3.parseData({
				"columns" : [
					{"name": "EDU_BOARD_NO"},
					{"name": "USER_ID"},
					{"name": "EDU_BOARD_STATUS"},
					{
						"name": "TOTAL_COUNT",
						"dataType": "string"
					},
					{"name": "EDU_BOARD_MAX_MEMBER_COUNT"}
				]
			});
			app.register(dataMap_3);
			var submission_1 = new cpr.protocols.Submission("updatesms");
			submission_1.action = "updateBoard.do";
			submission_1.addRequestData(dataMap_1);
			app.register(submission_1);
			
			var submission_2 = new cpr.protocols.Submission("deletesms");
			submission_2.action = "deleteBoard.do";
			app.register(submission_2);
			
			var submission_3 = new cpr.protocols.Submission("selectsms");
			submission_3.action = "selectBoardByBoardNo.do";
			submission_3.addRequestData(dataMap_1);
			submission_3.addResponseData(dataMap_1, false);
			if(typeof onSelectsmsSubmitSuccess == "function") {
				submission_3.addEventListener("submit-success", onSelectsmsSubmitSuccess);
			}
			app.register(submission_3);
			
			var submission_4 = new cpr.protocols.Submission("updateCommentsms");
			submission_4.action = "updateCommentBoard.do";
			submission_4.addRequestData(dataMap_2);
			app.register(submission_4);
			
			var submission_5 = new cpr.protocols.Submission("deleteCommentsms");
			submission_5.action = "deleteCommentBoard.do";
			submission_5.addRequestData(dataMap_2);
			app.register(submission_5);
			
			var submission_6 = new cpr.protocols.Submission("selectCommentsms");
			submission_6.action = "selectCommentBoard.do";
			submission_6.addRequestData(dataMap_2);
			submission_6.addResponseData(dataSet_2, false);
			submission_6.addResponseData(dataMap_2, false);
			if(typeof onSelectCommentsmsSubmitSuccess == "function") {
				submission_6.addEventListener("submit-success", onSelectCommentsmsSubmitSuccess);
			}
			app.register(submission_6);
			
			var submission_7 = new cpr.protocols.Submission("createCommentsms");
			submission_7.action = "createCommentBoard.do";
			submission_7.addRequestData(dataMap_2);
			app.register(submission_7);
			
			var submission_8 = new cpr.protocols.Submission("selectMemberCount");
			submission_8.action = "selectMemberCount.do";
			submission_8.addRequestData(dataMap_3);
			submission_8.addResponseData(dataMap_3, false);
			app.register(submission_8);
			
			var submission_9 = new cpr.protocols.Submission("updateMemberCount");
			submission_9.action = "updateMemberCount.do";
			submission_9.addRequestData(dataMap_3);
			app.register(submission_9);
			app.supportMedia("all and (min-width: 1920px)", "notebook");
			app.supportMedia("all and (min-width: 1920px) and (max-width: 1919px)", "new-screen");
			app.supportMedia("all and (min-width: 1024px) and (max-width: 1919px)", "default");
			app.supportMedia("all and (min-width: 500px) and (max-width: 1023px)", "tablet");
			app.supportMedia("all and (max-width: 499px)", "mobile");
			
			// Configure root container
			var container = app.getContainer();
			container.style.css({
				"width" : "100%",
				"height" : "100%"
			});
			
			// Layout
			var xYLayout_1 = new cpr.controls.layouts.XYLayout();
			container.setLayout(xYLayout_1);
			
			// UI Configuration
			var button_1 = new cpr.controls.Button();
			button_1.value = "목록";
			button_1.style.css({
				"background-color" : "#4682A9",
				"font-size" : "18px"
			});
			if(typeof onButtonClick7 == "function") {
				button_1.addEventListener("click", onButtonClick7);
			}
			container.addChild(button_1, {
				"top": "594px",
				"left": "1208px",
				"width": "180px",
				"height": "40px"
			});
			
			var group_1 = new cpr.controls.Container();
			group_1.style.setClasses(["cl-form-group"]);
			group_1.style.css({
				"font-size" : "18px"
			});
			var dataMapContext_1 = new cpr.bind.DataMapContext(app.lookup("eduApplyBoardMap"));
			group_1.setBindContext(dataMapContext_1);
			var formLayout_1 = new cpr.controls.layouts.FormLayout();
			formLayout_1.scrollable = false;
			formLayout_1.topMargin = "5px";
			formLayout_1.rightMargin = "5px";
			formLayout_1.bottomMargin = "5px";
			formLayout_1.leftMargin = "5px";
			formLayout_1.horizontalSpacing = "10px";
			formLayout_1.verticalSpacing = "10px";
			formLayout_1.horizontalSeparatorWidth = 1;
			formLayout_1.verticalSeparatorWidth = 1;
			formLayout_1.setColumns(["100px", "1fr", "100px", "1fr"]);
			formLayout_1.setUseColumnShade(0, true);
			formLayout_1.setUseColumnShade(2, true);
			formLayout_1.setRows(["45px", "45px", "45px"]);
			group_1.setLayout(formLayout_1);
			(function(container){
				var output_1 = new cpr.controls.Output();
				output_1.value = "교육기간";
				output_1.style.css({
					"font-size" : "16px",
					"text-align" : "center"
				});
				container.addChild(output_1, {
					"colIndex": 0,
					"rowIndex": 0
				});
				var output_2 = new cpr.controls.Output();
				output_2.value = "모집기간";
				output_2.style.css({
					"font-size" : "16px",
					"text-align" : "center"
				});
				container.addChild(output_2, {
					"colIndex": 2,
					"rowIndex": 0
				});
				var output_3 = new cpr.controls.Output();
				output_3.value = "모집인원";
				output_3.style.css({
					"font-size" : "16px",
					"text-align" : "center"
				});
				container.addChild(output_3, {
					"colIndex": 0,
					"rowIndex": 1
				});
				var output_4 = new cpr.controls.Output();
				output_4.value = "교육장소";
				output_4.style.css({
					"font-size" : "16px",
					"text-align" : "center"
				});
				container.addChild(output_4, {
					"colIndex": 0,
					"rowIndex": 2
				});
				var output_5 = new cpr.controls.Output();
				output_5.value = "교육분야";
				output_5.style.css({
					"font-size" : "16px",
					"text-align" : "center"
				});
				container.addChild(output_5, {
					"colIndex": 2,
					"rowIndex": 1
				});
				var inputBox_1 = new cpr.controls.InputBox("memberCount");
				inputBox_1.placeholder = "모집 인원을 입력하세요";
				inputBox_1.inputFilter = "[0-9]";
				inputBox_1.style.css({
					"font-size" : "16px",
					"text-align" : "center"
				});
				var dataMapContext_2 = new cpr.bind.DataMapContext(app.lookup("eduApplyBoardMap"));
				inputBox_1.setBindContext(dataMapContext_2);
				inputBox_1.bind("value").toDataColumn("EDU_BOARD_MAX_MEMBER_COUNT");
				if(typeof onIpb3Click == "function") {
					inputBox_1.addEventListener("click", onIpb3Click);
				}
				container.addChild(inputBox_1, {
					"colIndex": 1,
					"rowIndex": 1
				});
				var inputBox_2 = new cpr.controls.InputBox("category");
				inputBox_2.placeholder = "교육 분야를 입력하세요";
				inputBox_2.style.css({
					"font-size" : "16px",
					"text-align" : "center"
				});
				var dataMapContext_3 = new cpr.bind.DataMapContext(app.lookup("eduApplyBoardMap"));
				inputBox_2.setBindContext(dataMapContext_3);
				inputBox_2.bind("value").toDataColumn("EDU_BOARD_CATEGORY");
				container.addChild(inputBox_2, {
					"colIndex": 3,
					"rowIndex": 1
				});
				var userDefinedControl_1 = new udc.exam.udcExamDuoDatePicker("udccomduodatepicker1");
				userDefinedControl_1.useAutoSelect = true;
				userDefinedControl_1.selectOption = "day";
				userDefinedControl_1.style.css({
					"font-size" : "16px",
					"text-align" : "center"
				});
				userDefinedControl_1.bind("fromValue").toDataColumn("EDU_BOARD_START_PERIOD");
				userDefinedControl_1.bind("toValue").toDataColumn("EDU_BOARD_END_PERIOD");
				container.addChild(userDefinedControl_1, {
					"colIndex": 1,
					"rowIndex": 0
				});
				var userDefinedControl_2 = new udc.exam.udcExamDuoDatePicker("udccomduodatepicker2");
				userDefinedControl_2.style.css({
					"font-size" : "16px"
				});
				userDefinedControl_2.bind("fromValue").toDataColumn("EDU_BOARD_APPLY_START_PERIOD");
				userDefinedControl_2.bind("toValue").toDataColumn("EDU_BOARD_APPLY_END_PERIOD");
				container.addChild(userDefinedControl_2, {
					"colIndex": 3,
					"rowIndex": 0
				});
				var group_2 = new cpr.controls.Container();
				var formLayout_2 = new cpr.controls.layouts.FormLayout();
				formLayout_2.scrollable = false;
				formLayout_2.topMargin = "5px";
				formLayout_2.rightMargin = "5px";
				formLayout_2.bottomMargin = "5px";
				formLayout_2.leftMargin = "5px";
				formLayout_2.horizontalSpacing = "10px";
				formLayout_2.verticalSpacing = "10px";
				formLayout_2.setColumns(["1fr", "1fr", "150px"]);
				formLayout_2.setRows(["1fr"]);
				group_2.setLayout(formLayout_2);
				(function(container){
					var inputBox_3 = new cpr.controls.InputBox("address");
					inputBox_3.placeholder = "주소를 입력 해주세요";
					inputBox_3.style.css({
						"font-size" : "16px",
						"text-align" : "center"
					});
					inputBox_3.bind("value").toDataColumn("EDU_BOARD_ADDRESS");
					container.addChild(inputBox_3, {
						"colIndex": 0,
						"rowIndex": 0,
						"colSpan": 3,
						"rowSpan": 1
					});
				})(group_2);
				container.addChild(group_2, {
					"colIndex": 1,
					"rowIndex": 2,
					"colSpan": 3,
					"rowSpan": 1
				});
			})(group_1);
			container.addChild(group_1, {
				"top": "132px",
				"left": "261px",
				"width": "1511px",
				"height": "163px"
			});
			
			var inputBox_4 = new cpr.controls.InputBox("content");
			inputBox_4.placeholder = "     내용을 입력하세요";
			inputBox_4.style.css({
				"font-size" : "16px",
				"text-align" : "left"
			});
			var dataMapContext_4 = new cpr.bind.DataMapContext(app.lookup("eduApplyBoardMap"));
			inputBox_4.setBindContext(dataMapContext_4);
			inputBox_4.bind("value").toDataColumn("EDU_BOARD_CONTENT");
			container.addChild(inputBox_4, {
				"top": "294px",
				"left": "262px",
				"width": "1510px",
				"height": "283px"
			});
			
			var inputBox_5 = new cpr.controls.InputBox("title");
			inputBox_5.placeholder = "     제목을 입력하세요";
			inputBox_5.style.css({
				"font-size" : "18px",
				"text-align" : "left"
			});
			var dataMapContext_5 = new cpr.bind.DataMapContext(app.lookup("eduApplyBoardMap"));
			inputBox_5.setBindContext(dataMapContext_5);
			inputBox_5.bind("value").toDataColumn("EDU_BOARD_TITLE");
			if(typeof onIpb6ValueChange == "function") {
				inputBox_5.addEventListener("value-change", onIpb6ValueChange);
			}
			if(typeof onIpb6BeforeValueChange == "function") {
				inputBox_5.addEventListener("before-value-change", onIpb6BeforeValueChange);
			}
			if(typeof onIpb6Clear == "function") {
				inputBox_5.addEventListener("clear", onIpb6Clear);
			}
			container.addChild(inputBox_5, {
				"top": "72px",
				"left": "260px",
				"width": "1509px",
				"height": "50px"
			});
			
			var button_2 = new cpr.controls.Button();
			button_2.value = "수정";
			button_2.style.css({
				"background-color" : "#4682A9",
				"font-size" : "18px"
			});
			if(typeof onButtonClick == "function") {
				button_2.addEventListener("click", onButtonClick);
			}
			container.addChild(button_2, {
				"top": "594px",
				"left": "1398px",
				"width": "180px",
				"height": "40px"
			});
			
			var output_6 = new cpr.controls.Output();
			output_6.value = "\t교육 모집 등록";
			output_6.style.css({
				"border-right-style" : "solid",
				"border-bottom-color" : "#d5d5d5",
				"border-top-width" : "1px",
				"border-right-width" : "1px",
				"border-left-color" : "#d5d5d5",
				"font-size" : "20px",
				"border-right-color" : "#d5d5d5",
				"border-left-width" : "1px",
				"border-top-style" : "solid",
				"background-color" : "#FFFFFF",
				"border-left-style" : "solid",
				"border-bottom-width" : "1px",
				"border-top-color" : "#d5d5d5",
				"border-bottom-style" : "solid"
			});
			container.addChild(output_6, {
				"top": "22px",
				"left": "260px",
				"width": "1509px",
				"height": "40px"
			});
			
			var button_3 = new cpr.controls.Button();
			button_3.value = "삭제";
			button_3.style.css({
				"background-color" : "#4682A9",
				"font-size" : "18px"
			});
			if(typeof onButtonClick2 == "function") {
				button_3.addEventListener("click", onButtonClick2);
			}
			container.addChild(button_3, {
				"top": "594px",
				"left": "1589px",
				"width": "180px",
				"height": "40px"
			});
			
			var button_4 = new cpr.controls.Button();
			button_4.value = "기존 값";
			if(typeof onButtonClick4 == "function") {
				button_4.addEventListener("click", onButtonClick4);
			}
			container.addChild(button_4, {
				"top": "622px",
				"left": "370px",
				"width": "100px",
				"height": "20px"
			});
			
			var output_7 = new cpr.controls.Output();
			output_7.value = "댓글";
			output_7.style.css({
				"border-right-style" : "solid",
				"border-bottom-color" : "#d5d5d5",
				"border-top-width" : "1px",
				"border-right-width" : "1px",
				"border-left-color" : "#d5d5d5",
				"font-size" : "20px",
				"border-right-color" : "#d5d5d5",
				"border-left-width" : "1px",
				"border-top-style" : "solid",
				"background-color" : "#FFFFFF",
				"border-left-style" : "solid",
				"border-bottom-width" : "1px",
				"border-top-color" : "#d5d5d5",
				"border-bottom-style" : "solid",
				"text-align" : "center"
			});
			container.addChild(output_7, {
				"top": "652px",
				"left": "260px",
				"width": "197px",
				"height": "40px"
			});
			
			var button_5 = new cpr.controls.Button();
			button_5.value = "댓글 기존 값";
			if(typeof onButtonClick5 == "function") {
				button_5.addEventListener("click", onButtonClick5);
			}
			container.addChild(button_5, {
				"top": "622px",
				"left": "260px",
				"width": "100px",
				"height": "20px"
			});
			
			var group_3 = new cpr.controls.Container();
			group_3.style.setClasses(["cl-form-group"]);
			var formLayout_3 = new cpr.controls.layouts.FormLayout();
			formLayout_3.scrollable = false;
			formLayout_3.topMargin = "5px";
			formLayout_3.rightMargin = "5px";
			formLayout_3.bottomMargin = "5px";
			formLayout_3.leftMargin = "5px";
			formLayout_3.horizontalSpacing = "10px";
			formLayout_3.verticalSpacing = "10px";
			formLayout_3.horizontalSeparatorWidth = 1;
			formLayout_3.verticalSeparatorWidth = 1;
			formLayout_3.setColumns(["200px", "1fr", "180px"]);
			formLayout_3.setRows(["60px"]);
			group_3.setLayout(formLayout_3);
			(function(container){
				var inputBox_6 = new cpr.controls.InputBox("userId");
				inputBox_6.readOnly = true;
				inputBox_6.placeholder = "USER_ID";
				inputBox_6.style.css({
					"font-size" : "16px",
					"text-align" : "center"
				});
				inputBox_6.bind("value").toDataMap(app.lookup("commentBoardMap"), "USER_ID");
				container.addChild(inputBox_6, {
					"colIndex": 0,
					"rowIndex": 0
				});
				var button_6 = new cpr.controls.Button();
				button_6.value = "댓글쓰기";
				button_6.style.css({
					"background-color" : "#4682A9",
					"font-size" : "18px"
				});
				if(typeof onButtonClick12 == "function") {
					button_6.addEventListener("click", onButtonClick12);
				}
				container.addChild(button_6, {
					"colIndex": 2,
					"rowIndex": 0
				});
				var inputBox_7 = new cpr.controls.InputBox("commentContent");
				inputBox_7.placeholder = "댓글을 입력해주세요";
				inputBox_7.style.css({
					"font-size" : "16px"
				});
				inputBox_7.bind("value").toDataMap(app.lookup("commentBoardMap"), "EDU_APPLY_COMMENT_CONTENT");
				container.addChild(inputBox_7, {
					"colIndex": 1,
					"rowIndex": 0
				});
			})(group_3);
			container.addChild(group_3, {
				"top": "702px",
				"left": "260px",
				"width": "1513px",
				"height": "68px"
			});
			
			var button_7 = new cpr.controls.Button();
			button_7.value = "참여하기";
			button_7.style.css({
				"background-color" : "#4682A9",
				"font-size" : "18px"
			});
			if(typeof onButtonClick8 == "function") {
				button_7.addEventListener("click", onButtonClick8);
			}
			container.addChild(button_7, {
				"top": "644px",
				"left": "1589px",
				"width": "180px",
				"height": "40px"
			});
			
			var button_8 = new cpr.controls.Button();
			button_8.value = "댓글 그리드 값";
			if(typeof onButtonClick11 == "function") {
				button_8.addEventListener("click", onButtonClick11);
			}
			container.addChild(button_8, {
				"top": "620px",
				"left": "480px",
				"width": "100px",
				"height": "20px"
			});
			
			var grid_1 = new cpr.controls.Grid("grd1");
			grid_1.init({
				"dataSet": app.lookup("commentListSet"),
				"autoRowHeight": "none",
				"autoFit": "1",
				"resizableColumns": "all",
				"columns": [
					{"width": "144px"},
					{"width": "345px"},
					{"width": "149px"}
				],
				"header": {
					"rows": [{"height": "24px"}],
					"cells": [
						{
							"constraint": {"rowIndex": 0, "colIndex": 0},
							"configurator": function(cell){
								cell.filterable = false;
								cell.sortable = false;
								cell.targetColumnName = "USER_ID";
								cell.text = "USER_ID";
							}
						},
						{
							"constraint": {"rowIndex": 0, "colIndex": 1},
							"configurator": function(cell){
								cell.filterable = false;
								cell.sortable = false;
								cell.targetColumnName = "EDU_APPLY_COMMENT_CONTENT";
								cell.text = "EDU_APPLY_COMMENT_CONTENT";
							}
						},
						{
							"constraint": {"rowIndex": 0, "colIndex": 2},
							"configurator": function(cell){
								cell.text = "삭제버튼";
							}
						}
					]
				},
				"detail": {
					"rows": [{"height": "40px"}],
					"cells": [
						{
							"constraint": {"rowIndex": 0, "colIndex": 0},
							"configurator": function(cell){
								cell.columnName = "USER_ID";
							}
						},
						{
							"constraint": {"rowIndex": 0, "colIndex": 1},
							"configurator": function(cell){
								cell.columnName = "EDU_APPLY_COMMENT_CONTENT";
							}
						},
						{
							"constraint": {"rowIndex": 0, "colIndex": 2},
							"configurator": function(cell){
								cell.control = (function(){
									var button_9 = new cpr.controls.Button("grdDelete");
									button_9.visible = false;
									button_9.readOnly = true;
									button_9.value = "삭제";
									if(typeof onButtonClick14 == "function") {
										button_9.addEventListener("click", onButtonClick14);
									}
									return button_9;
								})();
							}
						}
					]
				}
			});
			grid_1.style.css({
				"border-right-style" : "none",
				"border-left-style" : "none",
				"border-bottom-style" : "none",
				"border-top-style" : "solid"
			});
			container.addChild(grid_1, {
				"top": "777px",
				"left": "261px",
				"width": "1511px",
				"height": "355px"
			});
			if(typeof onBodyInit == "function"){
				app.addEventListener("init", onBodyInit);
			}
			if(typeof onBodyLoad2 == "function"){
				app.addEventListener("load", onBodyLoad2);
			}
		}
	});
	app.title = "detailBoard";
	cpr.core.Platform.INSTANCE.register(app);
})();
