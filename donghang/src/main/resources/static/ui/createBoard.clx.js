/*
 * App URI: createBoard
 * Source Location: createBoard.clx
 *
 * This file was generated by eXBuilder6 compiler(1.0.4640), Don't edit manually.
 */
(function() {
	var app = new cpr.core.App("createBoard", { 
		onPrepare: function(loader) {
		},
		onCreate: function(/* cpr.core.AppInstance */ app, exports) {
			var linker = {};
			// Start - User Script
			/************************************************
			 * detailBoard.js
			 * Created at 2023. 8. 8. 오전 10:04:40.
			 *
			 * @author USER
			 ************************************************/
			function onBodyLoad(e) {
				var eduApplyBoardMap = app.lookup("eduApplyBoardMap");
				var createSessionCheckSms = app.lookup("createSessionCheckSms");
				createSessionCheckSms.send();
				var host = app.getHost();
				var hostAppInstance = host.getAppInstance();
				var initValue = host.initValue;
				var createSessionCheckMap = app.lookup("createSessionCheckMap");
				//컨트롤러로 boardNo 값 보내기
				
				
				//list 이동
				var listButton = app.lookup("listButton");
				listButton.addEventListener("click", function(e) {
					var vcEmb = hostAppInstance.lookup("ea1");
					var vsAppId = "eduApplyboardList";
					if (vsAppId == null) {
						return alert("추가될 App이 존재하지 않습니다.");
					}
					cpr.core.App.load(vsAppId, function( /*cpr.core.App*/ loadedApp) {
						/*임베디드앱에 안에 앱이 있는 경우에는 앱을 삭제해줍니다.(다시 앱을 열고싶을때 스크립트 작성)*/
						if (vcEmb.getEmbeddedAppInstance()) {
							vcEmb.getEmbeddedAppInstance().dispose();
						}
						/*로드된 앱이 있는 경우에는 임베디드앱 안에 불러온 앱을 넣습니다.*/
						if (loadedApp) {
							/*초기값을 전달합니다.*/
							//			vcEmb.ready(function(/*cpr.controls.EmbeddedApp*/embApp){
							//			embApp.initValue ="eduApplyBoardMap.getValue("EDU_BOARD_NO");
							//			})
							/*임베디드 앱에 내장할 앱을 로드하여 설정합니다*/
							vcEmb.app = loadedApp;
							var app1 = vcEmb.app;
							app1.getInstances()
						}
					});
				});
				var eduApplyBoardMap = app.lookup("eduApplyBoardMap");
				//create 이동
				var createButton = app.lookup("createButton");
				createButton.addEventListener("click", function(e) {
					var vcEmb = hostAppInstance.lookup("ea1");
					if (createSessionCheckMap.getValue("USER_ID")) {
						var vsAppId = "eduApplyboardList";
					} else {
						alert("로그인이 필요합니다")
						var vsAppId = " loginMember"
					}
					
					if (vsAppId == null) {
						return alert("추가될 App이 존재하지 않습니다.");
					}
					cpr.core.App.load(vsAppId, function( /*cpr.core.App*/ loadedApp) {
						/*임베디드앱에 안에 앱이 있는 경우에는 앱을 삭제해줍니다.(다시 앱을 열고싶을때 스크립트 작성)*/
						if (vcEmb.getEmbeddedAppInstance()) {
							vcEmb.getEmbeddedAppInstance().dispose();
						}
						/*로드된 앱이 있는 경우에는 임베디드앱 안에 불러온 앱을 넣습니다.*/
						if (loadedApp) {
							/*초기값을 전달합니다.*/
							//			vcEmb.ready(function(/*cpr.controls.EmbeddedApp*/embApp){
							//			embApp.initValue ="eduApplyBoardMap.getValue("EDU_BOARD_NO");
							//			})
							/*임베디드 앱에 내장할 앱을 로드하여 설정합니다*/
							vcEmb.app = loadedApp;
							var app1 = vcEmb.app;
							app1.getInstances()
						}
					});
				});
			}
			/*
			 * "등록" 버튼에서 click 이벤트 발생 시 호출.
			 * 사용자가 컨트롤을 클릭할 때 발생하는 이벤트.
			 */

			function onButtonClick(e) {
				var button = e.control;
				var submission = app.lookup("createsms");
				var eduApplyBoardMap = app.lookup("eduApplyBoardMap");
				var udcExamDuoDatePicker = app.lookup("udccomduodatepicker1");
				var udcExamDuoDatePicker2 = app.lookup("udccomduodatepicker2");
				var addressinputBox = app.lookup("address");
				var detailAdressinputBox = app.lookup("detailAdress");
				var content = app.lookup("content");
				var createSessionCheckMap = app.lookup("createSessionCheckMap");
				
				var fromValueList = udcExamDuoDatePicker.fromValue.split(" ");
				var toValueList = udcExamDuoDatePicker.toValue.split(" ");
				var fromValueList2 = udcExamDuoDatePicker2.fromValue.split(" ");
				var toValueList2 = udcExamDuoDatePicker2.toValue.split(" ");
				eduApplyBoardMap.setValue("EDU_BOARD_START_PERIOD",fromValueList[0]);
				eduApplyBoardMap.setValue("EDU_BOARD_END_PERIOD", toValueList[0]);
				eduApplyBoardMap.setValue("EDU_BOARD_APPLY_START_PERIOD", fromValueList2[0]);
				eduApplyBoardMap.setValue("EDU_BOARD_APPLY_END_PERIOD", toValueList2[0]);
				eduApplyBoardMap.setValue("EDU_BOARD_ADDRESS", addressinputBox.value + "-" + detailAdressinputBox.value);
				eduApplyBoardMap.setValue("EDU_BOARD_CONTENT", content.value);
				var value = eduApplyBoardMap.getValue("USER_ID");
				if (createSessionCheckMap.getValue("USER_ID")) {
					submission.send()
					alert("등록 되었습니다");
				}
				
			}

			/*
			 * "주소찾기" 버튼에서 click 이벤트 발생 시 호출.
			 * 사용자가 컨트롤을 클릭할 때 발생하는 이벤트.
			 */
			function onButtonClick3(e) {
				var button = e.control;
				cpr.core.ResourceLoader.loadScript("//t1.daumcdn.net/mapjsapi/bundle/postcode/prod/postcode.v2.js")
					.then(function(input) {
						new daum.Postcode({
							oncomplete: function(data) {
								// 팝업에서 검색결과 항목을 클릭했을때 실행할 코드를 작성하는 부분입니다.
								// 예제를 참고하여 다양한 활용법을 확인해 보세요.
								var inputBox = app.lookup("address");
								//var inputBox2 = app.lookup("PostCode");
								var addr = "";
								//사용자가 선택한 주소 타입에 따라 해당 주소 값을 가져온다.
								if (data.userSelectedType === 'R') { // 사용자가 도로명 주소를 선택했을 경우
									addr = data.roadAddress;
									inputBox.value = data.zonecode + "-" + addr;
								} else { // 사용자가 지번 주소를 선택했을 경우(J)
									addr = data.jibunAddress;
									inputBox.value = data.zonecode + "-" + addr;
								}
								//inputBox2.value = data.zonecode;
							}
						}).open();
					});
			}

			/*
			 * "목록" 버튼에서 click 이벤트 발생 시 호출.
			 * 사용자가 컨트롤을 클릭할 때 발생하는 이벤트.
			 */
			function onButtonClick2(e) {
				var button = e.control;
			}

			/*
			 * 서브미션에서 submit-success 이벤트 발생 시 호출.
			 * 통신이 성공하면 발생합니다.
			 */
			function onCreateSessionCheckSmsSubmitSuccess(e) {
				var createSessionCheckSms = e.control;
				var createSessionCheckMap = app.lookup("createSessionCheckMap");
				var value = createSessionCheckMap.getValue("USER_ID");
				if (createSessionCheckMap.getValue("USER_ID")) {}
			};
			// End - User Script
			
			// Header
			var dataSet_1 = new cpr.data.DataSet("boardList");
			dataSet_1.parseData({
				"columns" : [
					{
						"name": "EDU_BOARD_NO",
						"dataType": "number"
					},
					{"name": "EDU_BOARD_TITLE"},
					{"name": "EDU_BOARD_START_PERIOD"},
					{"name": "EDU_BOARD_END_PERIOD"},
					{"name": "EDU_BOARD_APPLY_START_PERIOD"},
					{"name": "EDU_BOARD_APPLY_END_PERIOD"},
					{
						"name": "EDU_BOARD_MEMBER_COUNT",
						"dataType": "number"
					},
					{"name": "EDU_BOARD_STATUS"},
					{"name": "EDU_BOARD_ADDRESS"},
					{"name": "EDU_BOARD_CATEGORY"},
					{"name": "EDU_BOARD_CONTENT"}
				]
			});
			app.register(dataSet_1);
			
			var dataSet_2 = new cpr.data.DataSet("loginSession");
			dataSet_2.parseData({
				"columns" : [
					{"name": "USER_ID"},
					{"name": "PASSWORD"},
					{"name": "ADDRESS"},
					{"name": "USER_TEL"},
					{"name": "userName"},
					{"name": "NICKNAME"}
				]
			});
			app.register(dataSet_2);
			var dataMap_1 = new cpr.data.DataMap("eduApplyBoardMap");
			dataMap_1.parseData({
				"columns" : [
					{
						"name": "EDU_BOARD_TITLE",
						"dataType": "string"
					},
					{"name": "EDU_BOARD_START_PERIOD"},
					{
						"name": "EDU_BOARD_END_PERIOD",
						"dataType": "string"
					},
					{
						"name": "EDU_BOARD_APPLY_START_PERIOD",
						"dataType": "string"
					},
					{"name": "EDU_BOARD_APPLY_END_PERIOD"},
					{
						"name": "EDU_BOARD_MAX_MEMBER_COUNT",
						"dataType": "string"
					},
					{"name": "EDU_BOARD_ADDRESS"},
					{"name": "EDU_BOARD_CATEGORY"},
					{
						"name": "EDU_BOARD_CONTENT",
						"defaultValue": ""
					},
					{
						"name": "USER_ID",
						"defaultValue": ""
					}
				]
			});
			app.register(dataMap_1);
			
			var dataMap_2 = new cpr.data.DataMap("createSessionCheckMap");
			dataMap_2.parseData({
				"columns" : [{"name": "USER_ID"}]
			});
			app.register(dataMap_2);
			var submission_1 = new cpr.protocols.Submission("createsms");
			submission_1.action = "createBoard.do";
			submission_1.addRequestData(dataMap_1);
			app.register(submission_1);
			
			var submission_2 = new cpr.protocols.Submission("createSessionCheckSms");
			submission_2.action = "createSessionCheck.do";
			submission_2.addResponseData(dataMap_2, false);
			if(typeof onCreateSessionCheckSmsSubmitSuccess == "function") {
				submission_2.addEventListener("submit-success", onCreateSessionCheckSmsSubmitSuccess);
			}
			app.register(submission_2);
			app.supportMedia("all and (min-width: 1920px)", "notebook");
			app.supportMedia("all and (min-width: 1024px) and (max-width: 1919px)", "default");
			app.supportMedia("all and (min-width: 500px) and (max-width: 1023px)", "tablet");
			app.supportMedia("all and (max-width: 499px)", "mobile");
			
			// Configure root container
			var container = app.getContainer();
			container.style.css({
				"width" : "100%",
				"height" : "100%"
			});
			var dataMapContext_1 = new cpr.bind.DataMapContext(app.lookup("eduApplyBoardMap"));
			container.setBindContext(dataMapContext_1);
			
			// Layout
			var xYLayout_1 = new cpr.controls.layouts.XYLayout();
			container.setLayout(xYLayout_1);
			
			// UI Configuration
			var button_1 = new cpr.controls.Button("listButton");
			button_1.value = "목록";
			button_1.style.css({
				"background-color" : "#e9e9e9",
				"font-size" : "18px",
				"background-image" : "none"
			});
			if(typeof onButtonClick2 == "function") {
				button_1.addEventListener("click", onButtonClick2);
			}
			container.addChild(button_1, {
				"top": "602px",
				"left": "1360px",
				"width": "180px",
				"height": "40px"
			});
			
			var group_1 = new cpr.controls.Container();
			group_1.style.setClasses(["cl-form-group"]);
			group_1.style.css({
				"font-size" : "18px"
			});
			var dataMapContext_2 = new cpr.bind.DataMapContext(app.lookup("eduApplyBoardMap"));
			group_1.setBindContext(dataMapContext_2);
			var formLayout_1 = new cpr.controls.layouts.FormLayout();
			formLayout_1.scrollable = false;
			formLayout_1.topMargin = "5px";
			formLayout_1.rightMargin = "5px";
			formLayout_1.bottomMargin = "5px";
			formLayout_1.leftMargin = "5px";
			formLayout_1.horizontalSpacing = "10px";
			formLayout_1.verticalSpacing = "10px";
			formLayout_1.horizontalSeparatorWidth = 1;
			formLayout_1.verticalSeparatorWidth = 1;
			formLayout_1.setColumns(["100px", "1fr", "100px", "1fr"]);
			formLayout_1.setUseColumnShade(0, true);
			formLayout_1.setUseColumnShade(2, true);
			formLayout_1.setRows(["45px", "45px", "45px"]);
			group_1.setLayout(formLayout_1);
			(function(container){
				var output_1 = new cpr.controls.Output();
				output_1.value = "교육기간";
				output_1.style.css({
					"background-color" : "#e9e9e9",
					"font-size" : "16px",
					"background-image" : "none",
					"text-align" : "center"
				});
				container.addChild(output_1, {
					"colIndex": 0,
					"rowIndex": 0
				});
				var output_2 = new cpr.controls.Output();
				output_2.value = "모집기간";
				output_2.style.css({
					"background-color" : "#e9e9e9",
					"font-size" : "16px",
					"background-image" : "none",
					"text-align" : "center"
				});
				container.addChild(output_2, {
					"colIndex": 2,
					"rowIndex": 0
				});
				var output_3 = new cpr.controls.Output();
				output_3.value = "모집인원";
				output_3.style.css({
					"background-color" : "#e9e9e9",
					"font-size" : "16px",
					"background-image" : "none",
					"text-align" : "center"
				});
				container.addChild(output_3, {
					"colIndex": 0,
					"rowIndex": 1
				});
				var output_4 = new cpr.controls.Output();
				output_4.value = "교육장소";
				output_4.style.css({
					"background-color" : "#e9e9e9",
					"font-size" : "16px",
					"background-image" : "none",
					"text-align" : "center"
				});
				container.addChild(output_4, {
					"colIndex": 0,
					"rowIndex": 2
				});
				var output_5 = new cpr.controls.Output();
				output_5.value = "교육분야";
				output_5.style.css({
					"background-color" : "#e9e9e9",
					"font-size" : "16px",
					"background-image" : "none",
					"text-align" : "center"
				});
				container.addChild(output_5, {
					"colIndex": 2,
					"rowIndex": 1
				});
				var inputBox_1 = new cpr.controls.InputBox("ipb3");
				inputBox_1.placeholder = "모집 인원을 입력하세요";
				inputBox_1.maxLength = 5;
				inputBox_1.inputFilter = "[0-9]";
				inputBox_1.style.css({
					"font-size" : "16px",
					"text-align" : "center"
				});
				var dataMapContext_3 = new cpr.bind.DataMapContext(app.lookup("eduApplyBoardMap"));
				inputBox_1.setBindContext(dataMapContext_3);
				inputBox_1.bind("value").toDataColumn("EDU_BOARD_MAX_MEMBER_COUNT");
				if(typeof onIpb3Click == "function") {
					inputBox_1.addEventListener("click", onIpb3Click);
				}
				container.addChild(inputBox_1, {
					"colIndex": 1,
					"rowIndex": 1
				});
				var inputBox_2 = new cpr.controls.InputBox("ipb8");
				inputBox_2.placeholder = "교육 분야를 입력하세요";
				inputBox_2.style.css({
					"font-size" : "16px",
					"text-align" : "center"
				});
				var dataMapContext_4 = new cpr.bind.DataMapContext(app.lookup("eduApplyBoardMap"));
				inputBox_2.setBindContext(dataMapContext_4);
				inputBox_2.bind("value").toDataColumn("EDU_BOARD_CATEGORY");
				container.addChild(inputBox_2, {
					"colIndex": 3,
					"rowIndex": 1
				});
				var userDefinedControl_1 = new udc.exam.udcExamDuoDatePicker("udccomduodatepicker1");
				userDefinedControl_1.useAutoSelect = true;
				userDefinedControl_1.selectOption = "day";
				userDefinedControl_1.style.css({
					"background-color" : "#e9e9e9",
					"background-image" : "none",
					"text-align" : "center"
				});
				container.addChild(userDefinedControl_1, {
					"colIndex": 1,
					"rowIndex": 0
				});
				var userDefinedControl_2 = new udc.exam.udcExamDuoDatePicker("udccomduodatepicker2");
				userDefinedControl_2.useAutoSelect = true;
				userDefinedControl_2.selectOption = "day";
				userDefinedControl_2.style.css({
					"background-color" : "#e9e9e9",
					"background-image" : "none"
				});
				container.addChild(userDefinedControl_2, {
					"colIndex": 3,
					"rowIndex": 0
				});
				var group_2 = new cpr.controls.Container();
				var formLayout_2 = new cpr.controls.layouts.FormLayout();
				formLayout_2.scrollable = false;
				formLayout_2.topMargin = "5px";
				formLayout_2.rightMargin = "5px";
				formLayout_2.bottomMargin = "5px";
				formLayout_2.leftMargin = "5px";
				formLayout_2.horizontalSpacing = "10px";
				formLayout_2.verticalSpacing = "10px";
				formLayout_2.setColumns(["1fr", "1fr", "150px"]);
				formLayout_2.setRows(["1fr"]);
				group_2.setLayout(formLayout_2);
				(function(container){
					var inputBox_3 = new cpr.controls.InputBox("address");
					inputBox_3.placeholder = "주소를 입력 해주세요";
					inputBox_3.style.css({
						"font-size" : "18px",
						"text-align" : "center"
					});
					container.addChild(inputBox_3, {
						"colIndex": 0,
						"rowIndex": 0
					});
					var inputBox_4 = new cpr.controls.InputBox("detailAdress");
					inputBox_4.placeholder = "상세 주소를 입력 해주세요";
					inputBox_4.style.css({
						"font-size" : "18px",
						"text-align" : "center"
					});
					container.addChild(inputBox_4, {
						"colIndex": 1,
						"rowIndex": 0
					});
					var button_2 = new cpr.controls.Button();
					button_2.value = "주소찾기";
					button_2.style.css({
						"background-color" : "#e9e9e9",
						"font-size" : "18px",
						"background-image" : "none"
					});
					if(typeof onButtonClick3 == "function") {
						button_2.addEventListener("click", onButtonClick3);
					}
					container.addChild(button_2, {
						"colIndex": 2,
						"rowIndex": 0
					});
				})(group_2);
				container.addChild(group_2, {
					"colIndex": 1,
					"rowIndex": 2,
					"colSpan": 3,
					"rowSpan": 1
				});
			})(group_1);
			container.addChild(group_1, {
				"top": "131px",
				"left": "221px",
				"width": "1511px",
				"height": "163px"
			});
			
			var inputBox_5 = new cpr.controls.InputBox("ipb6");
			inputBox_5.placeholder = "     제목을 입력하세요";
			inputBox_5.lengthUnit = "utf8";
			inputBox_5.maxLength = 60;
			inputBox_5.style.css({
				"font-size" : "18px",
				"text-align" : "left"
			});
			var dataMapContext_5 = new cpr.bind.DataMapContext(app.lookup("eduApplyBoardMap"));
			inputBox_5.setBindContext(dataMapContext_5);
			inputBox_5.bind("value").toDataColumn("EDU_BOARD_TITLE");
			if(typeof onIpb6ValueChange == "function") {
				inputBox_5.addEventListener("value-change", onIpb6ValueChange);
			}
			if(typeof onIpb6BeforeValueChange == "function") {
				inputBox_5.addEventListener("before-value-change", onIpb6BeforeValueChange);
			}
			if(typeof onIpb6Clear == "function") {
				inputBox_5.addEventListener("clear", onIpb6Clear);
			}
			container.addChild(inputBox_5, {
				"top": "71px",
				"left": "220px",
				"width": "1509px",
				"height": "50px"
			});
			
			var button_3 = new cpr.controls.Button("createButton");
			button_3.value = "등록";
			button_3.style.css({
				"background-color" : "#e9e9e9",
				"font-size" : "18px",
				"background-image" : "none"
			});
			if(typeof onButtonClick == "function") {
				button_3.addEventListener("click", onButtonClick);
			}
			container.addChild(button_3, {
				"top": "602px",
				"left": "1550px",
				"width": "180px",
				"height": "40px"
			});
			
			var output_6 = new cpr.controls.Output();
			output_6.value = "\t\t교육 모집 등록";
			output_6.style.css({
				"border-right-style" : "solid",
				"border-bottom-color" : "#d5d5d5",
				"border-top-width" : "1px",
				"border-right-width" : "1px",
				"border-left-color" : "#d5d5d5",
				"font-size" : "20px",
				"border-right-color" : "#d5d5d5",
				"border-left-width" : "1px",
				"border-top-style" : "solid",
				"background-color" : "#FFFFFF",
				"border-left-style" : "solid",
				"border-bottom-width" : "1px",
				"border-top-color" : "#d5d5d5",
				"border-bottom-style" : "solid"
			});
			container.addChild(output_6, {
				"top": "21px",
				"left": "221px",
				"width": "1512px",
				"height": "40px"
			});
			
			var textArea_1 = new cpr.controls.TextArea("content");
			textArea_1.placeholder = "                                                                                                                                                                                                                                                                                                                                                                    내용을 입력 해주세요";
			textArea_1.style.css({
				"font-size" : "18px",
				"text-align" : "left"
			});
			textArea_1.bind("value").toDataColumn("EDU_BOARD_CONTENT");
			container.addChild(textArea_1, {
				"top": "293px",
				"left": "221px",
				"width": "1507px",
				"height": "277px"
			});
			if(typeof onBodyLoad == "function"){
				app.addEventListener("load", onBodyLoad);
			}
			if(typeof onBodyInit == "function"){
				app.addEventListener("init", onBodyInit);
			}
		}
	});
	app.title = "createBoard";
	cpr.core.Platform.INSTANCE.register(app);
})();
